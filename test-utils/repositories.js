const chai = require('chai')
const expect = chai.expect
const CONSTANTS = require('../src/constants')
const orgMockObj = require('../test/unit-tests/org/mockObjects.org')
const cveIdMockObj = require('../test/unit-tests/cve-id/mockObjects.cve-id')
const cveIdNonSeqMockObj = require('../test/unit-tests/cve-id/mockObjects.non-sequential')
const mwMockObj = require('../test/unit-tests/middleware/mockObjects.middleware')
const mwCnaMockObj = require('../test/unit-tests/middleware/onlyCnas.fixtures')
const mwSecretariatOrAdminMockObj = require('../test/unit-tests/middleware/onlySecretariatOrAdmin.fixtures')

/* -------- Org Repositories -------- */
class OrgCreated {
  async findOneByShortName () {
    return null
  }

  async updateByOrgUUID () {
    // This is where you can actually write some test assertions!
    // For instance, you can even inspect the settings object to make sure the code passes upsert as true.
    // Or more importantly, you can make sure UUID isn't null or something and you can inspect all the fields on the org object
    // to make sure it's exactly what should be sent to the database.
    // But at a bare minimum, you can simply return null because the code isn't actually inspecting the return here.
    return null
  }

  // Notice that the following two functions are used to get information for logging. We aren't examining the logs in this test,
  // so we can again get by with returning null.
  async getOrgUUID () {
    return null
  }
}

class NullOrgRepo {
  async findOneByShortName () {
    return null
  }

  async updateByOrgUUID () {
    return null
  }

  async getOrgUUID () {
    return null
  }

  async isSecretariat () {
    return null
  }

  async isSecretariatUUID () {
    return null
  }
}

class OrgCreatedWhenRolesDefined {
  async findOneByShortName () {
    return null
  }

  async updateByOrgUUID () {
    return null
  }

  async getOrgUUID () {
    return null
  }
}

class OrgNotCreatedAlreadyExists {
  async findOneByShortName () {
    return orgMockObj.existentOrg
  }
}

class OrgNotUpdatedDoesNotExist {
  async findOneByShortName () {
    return null
  }
}

class OrgNotUpdatedShortNameExists {
  async findOneByShortName () {
    return orgMockObj.existentOrg
  }
}

class OrgNotUpdatedIdQuotaUndefined {
  constructor () {
    orgMockObj.existentOrg.policies.id_quota = 1000
  }

  async findOneByShortName () {
    return orgMockObj.existentOrg
  }

  async updateByOrgUUID () {
    return { n: 1 }
  }

  async getOrgUUID () {
    return null
  }
}

class OrgNotUpdatedNoQueryParameters {
  async findOneByShortName () {
    return orgMockObj.existentOrg
  }

  async updateByOrgUUID () {
    return { n: 1 }
  }

  async getOrgUUID () {
    return null
  }
}

class OrgGet {
  async aggregate (aggregation) {
    if (aggregation[0].$match.short_name === orgMockObj.existentOrg.short_name) {
      return [orgMockObj.existentOrg]
    } else if (aggregation[0].$match.short_name === orgMockObj.owningOrg.short_name) {
      return [orgMockObj.owningOrg]
    }

    return []
  }

  async isSecretariat (shortname) {
    if (shortname === orgMockObj.secretariatHeader['CVE-API-ORG']) {
      return true
    } else {
      return false
    }
  }
}

class OrgSecretariatIdQuota {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return orgMockObj.existentOrg
  }

  async getOrgUUID () {
    return orgMockObj.existentOrg.UUID
  }
}

class OrgOwnerIdQuota {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return orgMockObj.owningOrg
  }

  async getOrgUUID () {
    return orgMockObj.owningOrg.UUID
  }
}

class OrgNotOwnerOrSecretariatIdQuota {
  async isSecretariat () {
    return false
  }
}

class OrgDoesNotExistIdQuota {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return null
  }
}

class OrgExceedsMinIdQuota {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return orgMockObj.orgWithNegativeIdQuota
  }

  async getOrgUUID () {
    return orgMockObj.orgWithNegativeIdQuota.UUID
  }
}

class OrgExceedsMaxIdQuota {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return orgMockObj.orgExceedingMaxIdQuota
  }

  async getOrgUUID () {
    return orgMockObj.orgExceedingMaxIdQuota.UUID
  }
}

class OrgCantCreateUserOrgDoesNotExist {
  async getOrgUUID () {
    return null
  }
}

class OrgCantCreateUserOrgDoesNotMatch {
  async getOrgUUID () {
    return orgMockObj.existentOrg.UUID
  }

  async findOneByUUID () {
    return orgMockObj.owningOrg
  }
}

class OrgCreatedUserOrgUndefined {
  async isSecretariatUUID () {
    return true
  }

  async getOrgUUID () {
    return orgMockObj.existentOrg.UUID
  }

  async findOneByUUID () {
    return orgMockObj.existentOrg
  }
}

class OrgCantCreateUserNotSecretariatOrAdmin {
  async isSecretariatUUID () {
    return false
  }

  async getOrgUUID (shortname) {
    if (shortname === orgMockObj.existentOrgDummy.short_name) {
      return orgMockObj.existentOrgDummy.UUID
    }

    return orgMockObj.owningOrg.UUID
  }

  async findOneByUUID (orgUUID) {
    if (orgUUID === orgMockObj.existentOrgDummy.UUID) {
      return orgMockObj.existentOrgDummy
    }

    return orgMockObj.owningOrg
  }
}

class OrgCreatedUserWithRole {
  async isSecretariatUUID () {
    return true
  }

  async getOrgUUID () {
    return orgMockObj.existentOrgDummy.UUID
  }

  async findOneByUUID () {
    return orgMockObj.existentOrgDummy
  }
}

class OrgCreatedUserAdminWithRole {
  async isSecretariatUUID () {
    return false
  }

  async getOrgUUID () {
    return orgMockObj.existentOrgDummy.UUID
  }

  async findOneByUUID () {
    return orgMockObj.existentOrgDummy
  }
}

class OrgUserNotUpdatedOrgDoesntExist {
  async getOrgUUID () {
    return null
  }

  async isSecretariat () {
    return true
  }
}

class OrgUserNotUpdatedUserDoesntExist {
  async getOrgUUID () {
    return orgMockObj.existentOrg
  }

  async isSecretariat () {
    return true
  }
}

class OrgUserNotUpdatedOrgQueryDoesntExist {
  async getOrgUUID (shortname) {
    if (shortname === orgMockObj.existentOrg.short_name) {
      return orgMockObj.existentOrg.UUID
    }
    return null
  }

  async isSecretariat () {
    return true
  }
}

class OrgUserUpdatedAddingRole {
  async getOrgUUID () {
    return orgMockObj.owningOrg.UUID
  }

  async isSecretariat () {
    return true
  }
}

class OrgUserCveIdUpdated {
  async getOrgUUID (shortname) {
    if (shortname === cveIdMockObj.owningOrg.short_name) {
      return cveIdMockObj.owningOrg.UUID
    } else if (shortname === cveIdMockObj.org.short_name) {
      return cveIdMockObj.org.UUID
    }
    return null
  }
}

class OrgGetUserCveIdUpdated {
  constructor () {
    cveIdMockObj.owningOrgUser.org_UUID = cveIdMockObj.org.UUID
  }

  async isSecretariat () {
    return true
  }

  async getOrgUUID () {
    return cveIdMockObj.org.UUID
  }
}

class OrgUserSecretNotResetOrgDoesntExist {
  async isSecretariat () {
    return true
  }

  async getOrgUUID () {
    return null
  }
}

class OrgUserSecretNotResetUserDoesntExist {
  async isSecretariat () {
    return true
  }

  async getOrgUUID () {
    return orgMockObj.existentOrg.UUID
  }
}

class OrgUserSecretReset {
  async isSecretariat () {
    return true
  }

  async getOrgUUID () {
    return orgMockObj.existentOrg.UUID
  }
}

class OrgUserSecretResetNotSecretariat {
  async isSecretariat () {
    return false
  }

  async getOrgUUID (shortname) {
    if (shortname === orgMockObj.existentOrgDummy.short_name) {
      return orgMockObj.existentOrgDummy.UUID
    }

    return orgMockObj.owningOrg.UUID
  }
}

class OrgGetUserOrgDoesntExist {
  async isSecretariat () {
    return true
  }

  async getOrgUUID () {
    return null
  }
}

class OrgGetUser {
  async isSecretariat (shortname) {
    return shortname === orgMockObj.existentOrg.short_name
  }

  async getOrgUUID (shortname) {
    if (shortname === orgMockObj.existentOrg.short_name) {
      return orgMockObj.existentOrg.UUID
    } else if (shortname === orgMockObj.owningOrg.short_name) {
      return orgMockObj.owningOrg.UUID
    }

    return null
  }
}

class OrgGetUserUpdated {
  async getOrgUUID () {
    return orgMockObj.org.UUID
  }
}

class OrgGetCveIdNotOwnerOrgReserved {
  async getOrgUUID () {
    return cveIdMockObj.org.UUID
  }

  async isSecretariatUUID () {
    return false
  }
}

class OrgGetCveIdNotOwnerOrgNotReserved {
  async getOrgUUID () {
    return cveIdMockObj.org.UUID
  }

  async isSecretariatUUID () {
    return false
  }

  async findOneByUUID () {
    return cveIdMockObj.owningOrg
  }
}

class OrgGetCveIdOwningOrg {
  async getOrgUUID () {
    return cveIdMockObj.owningOrg.UUID
  }

  async isSecretariatUUID () {
    return false
  }

  async findOneByUUID () {
    return cveIdMockObj.owningOrg
  }
}

class OrgGetCveIdRequestorSecretariat {
  async getOrgUUID () {
    return cveIdMockObj.secretariatOrg.UUID
  }

  async isSecretariatUUID () {
    return true
  }

  async findOneByUUID (uuid) {
    if (uuid === cveIdMockObj.secretariatOrg.UUID) {
      return cveIdMockObj.secretariatOrg
    } else {
      return cveIdMockObj.owningOrg
    }
  }
}

class OrgGetCveIdNoCveIdsWithParams {
  async isSecretariat () {
    return false
  }

  async getOrgUUID () {
    return cveIdMockObj.owningOrg.UUID
  }
}

class OrgGetCveIdRequestorSecretariatNoQuery {
  async getOrgUUID () {
    return cveIdMockObj.secretariatOrg.UUID
  }

  async findOneByUUID () {
    return cveIdMockObj.secretariatOrg
  }

  async isSecretariat () {
    return true
  }
}

class OrgGetCveIdRequestedNotChanged {
  async getOrgUUID () {
    return cveIdMockObj.owningOrg.UUID
  }

  async isSecretariat () {
    return false
  }
}

class OrgModifyCveIdDoesntExist {
  async getOrgUUID () {
    return null
  }
}

class OrgModifyCveIdOrgDoesntExist {
  async getOrgUUID () {
    return null
  }
}

class OrgModifyCveIdOrgAndStateModified {
  async getOrgUUID () {
    return cveIdMockObj.org.UUID
  }

  async findOneByUUID (uuid) {
    if (uuid === cveIdMockObj.org.UUID) {
      return cveIdMockObj.org
    } else {
      return cveIdMockObj.owningOrg
    }
  }
}

class OrgReserveNotOwningOrg {
  async isSecretariat () {
    return false
  }
}

class OrgReserveShortNameUndefined {
  async isSecretariat () {
    return true
  }
}

class OrgReserveOrgDoesntExist {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return null
  }
}

class OrgReserveAmountLargerThanNonSequential {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return cveIdMockObj.org
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdMockObj.org.short_name && cveIdMockObj.org.inUse === false) {
      cveIdMockObj.org.inUse = true
      return cveIdMockObj.org
    } else if (query.short_name === cveIdMockObj.org.short_name && cveIdMockObj.org.inUse === true) {
      cveIdMockObj.org.inUse = false
      return null
    }
  }
}
class OrgReserveAmountGreaterIdQuota {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return cveIdMockObj.org
  }
}

class OrgReserveYear2025RangeDoesntExist {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return cveIdMockObj.owningOrg
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === false) {
      cveIdMockObj.owningOrg.inUse = true
      return cveIdMockObj.owningOrg
    } else if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === true) {
      cveIdMockObj.owningOrg.inUse = false
      return null
    }
  }
}

class OrgReserveSequentialPriorityIsFull {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return cveIdMockObj.owningOrg
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === false) {
      cveIdMockObj.owningOrg.inUse = true
      return cveIdMockObj.owningOrg
    } else if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === true) {
      cveIdMockObj.owningOrg.inUse = false
      return null
    }
  }

  async getOrgUUID () {
    return cveIdMockObj.owningOrg.UUID
  }
}

class OrgReserveSequentialIsFull {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return cveIdMockObj.owningOrg
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === false) {
      cveIdMockObj.owningOrg.inUse = true
      return cveIdMockObj.owningOrg
    } else if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === true) {
      cveIdMockObj.owningOrg.inUse = false
      return null
    }
  }
}

class OrgReserveNonSequentialYearDoesntExist {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === false) {
      cveIdNonSeqMockObj.orgA.inUse = true
      return cveIdNonSeqMockObj.orgA
    } else if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === true) {
      cveIdNonSeqMockObj.orgA.inUse = false
      return null
    }
  }
}

class OrgReserveNonSequentialSuccess {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === false) {
      cveIdNonSeqMockObj.orgA.inUse = true
      return cveIdNonSeqMockObj.orgA
    } else if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === true) {
      cveIdNonSeqMockObj.orgA.inUse = false
      return null
    }
  }

  async getOrgUUID () {
    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveNonSequentialSuccessCaseAB {
  async isSecretariat () {
    return false
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === false) {
      cveIdNonSeqMockObj.orgA.inUse = true
      return cveIdNonSeqMockObj.orgA
    } else if (query.short_name === cveIdNonSeqMockObj.orgA.short_name && cveIdNonSeqMockObj.orgA.inUse === true) {
      cveIdNonSeqMockObj.orgA.inUse = false
      return null
    } else if (query.short_name === cveIdNonSeqMockObj.orgB.short_name && cveIdNonSeqMockObj.orgB.inUse === false) {
      cveIdNonSeqMockObj.orgB.inUse = true
      return cveIdNonSeqMockObj.orgB
    } else if (query.short_name === cveIdNonSeqMockObj.orgB.short_name && cveIdNonSeqMockObj.orgB.inUse === true) {
      cveIdNonSeqMockObj.orgB.inUse = false
      return null
    }
  }

  async findOneByShortName (shortname) {
    if (shortname === cveIdNonSeqMockObj.orgA.short_name) {
      return cveIdNonSeqMockObj.orgA
    }

    return cveIdNonSeqMockObj.orgB
  }

  async getOrgUUID (shortname) {
    if (shortname === cveIdNonSeqMockObj.orgA.short_name) {
      return cveIdNonSeqMockObj.orgA.UUID
    }

    return cveIdNonSeqMockObj.orgB.UUID
  }
}

class OrgReserveNonSequentialSuccessCaseA {
  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async getOrgUUID () {
    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveNonSequentialSuccessCaseB {
  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async getOrgUUID (shortname) {
    if (shortname === cveIdNonSeqMockObj.secretariatOrg.short_name) {
      return cveIdNonSeqMockObj.secretariatOrg.UUID
    }

    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveNonSequentialSuccessCaseD {
  async isSecretariat () {
    return false
  }

  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgB
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdNonSeqMockObj.orgB.short_name && cveIdNonSeqMockObj.orgB.inUse === false) {
      cveIdNonSeqMockObj.orgB.inUse = true
      return cveIdNonSeqMockObj.orgB
    } else if (query.short_name === cveIdNonSeqMockObj.orgB.short_name && cveIdNonSeqMockObj.orgB.inUse === true) {
      cveIdNonSeqMockObj.orgB.inUse = false
      return null
    }
  }
}

class OrgReserveNonSequentialSuccessCaseE {
  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async getOrgUUID (shortname) {
    if (shortname === cveIdNonSeqMockObj.secretariatOrg.short_name) {
      return cveIdNonSeqMockObj.secretariatOrg.UUID
    }

    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveNonSequentialCaseF {
  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async getOrgUUID (shortname) {
    if (shortname === cveIdNonSeqMockObj.secretariatOrg.short_name) {
      return cveIdNonSeqMockObj.secretariatOrg.UUID
    }

    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveNonSequentialSuccessCaseG {
  async findOneByShortName () {
    return cveIdNonSeqMockObj.orgA
  }

  async getOrgUUID (shortname) {
    if (shortname === cveIdNonSeqMockObj.secretariatOrg.short_name) {
      return cveIdNonSeqMockObj.secretariatOrg.UUID
    }

    return cveIdNonSeqMockObj.orgA.UUID
  }
}

class OrgReserveYear2025RangeDoesntExistSequential {
  async isSecretariat () {
    return true
  }

  async findOneByShortName () {
    return cveIdMockObj.owningOrg
  }

  async findOneAndUpdate (query) {
    if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === false) {
      cveIdMockObj.owningOrg.inUse = true
      return cveIdMockObj.owningOrg
    } else if (query.short_name === cveIdMockObj.owningOrg.short_name && cveIdMockObj.owningOrg.inUse === true) {
      cveIdMockObj.owningOrg.inUse = false
      return null
    }
  }
}

class OrgValidateUserSuccess {
  async getOrgUUID () {
    return mwMockObj.existentOrg.UUID
  }
}

class OrgValidateOrgDoesntExist {
  async getOrgUUID () {
    return null
  }
}

class OrgOnlyCnasOrgCnaPass {
  async findOneByShortName () {
    return mwCnaMockObj.cnaOrg
  }
}

class OrgOnlyCnasOrgCnaSecretariatPass {
  async findOneByShortName () {
    return mwCnaMockObj.secretariatAndCnaOrg
  }
}

class OrgOnlyCnasOrgSecretariatPass {
  async findOneByShortName () {
    return mwCnaMockObj.secretariatOrg
  }
}

class OrgOnlyCnasOrgNotCnaReject {
  async findOneByShortName () {
    return mwCnaMockObj.notCnaOrg
  }
}

class OrgOnlySecretariatPass {
  async isSecretariat () {
    return true
  }
}

class OrgOnlySecretariatReject {
  async isSecretariat () {
    return false
  }
}

class OrgOnlySecretariatOrAdmin {
  async isSecretariat (shortname) {
    if (shortname === mwSecretariatOrAdminMockObj.secretariatOrg.short_name) {
      return true
    }

    return false
  }
}

/* -------- Cve Id Repositories -------- */
class NullCveIdRepo {
  async countDocuments () {
    return null
  }
}

class CveIdOwnerIdQuota {
  async countDocuments () {
    return 0
  }
}

class CveIdSecretariatIdQuota {
  async countDocuments () {
    return 0
  }
}

class CveIdExceedsMinQuota {
  async countDocuments () {
    return 0
  }
}

class CveIdExceedsMaxQuota {
  async countDocuments () {
    return 0
  }
}

class CveIdGetCveIdDoesntExist {
  async findOneByCveId () {
    return null
  }
}

class CveIdGetCveIdAvailable {
  async findOneByCveId () {
    return cveIdMockObj.cveDummy5
  }
}

class CveIdGetCveIdNotOwningOrg {
  async findOneByCveId () {
    return cveIdMockObj.cveReserved
  }
}

class CveIdGetCveIdNotOwningOrgNotReserved {
  async findOneByCveId () {
    return cveIdMockObj.cveReject
  }
}

class CveIdGetCveIdOwningOrg {
  async findOneByCveId () {
    return cveIdMockObj.cvePublic
  }
}

class CveIdGetCveIdNoResultsWithParams {
  async aggregatePaginate () {
    const res = {
      itemsList: [],
      itemCount: 0,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 0
  }
}

class CveIdGetCveIdStateProvided {
  constructor () {
    this.testRes1 = cveIdMockObj.cvePublic
    this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
  }

  async aggregatePaginate () {
    const res = {
      itemsList: [this.testRes1],
      itemCount: 1,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 1
  }
}

class CveIdGetCveIdNoAvailableCves {
  async aggregate () {
    return []
  }
}

class CveIdGetCveIdYearProvided {
  constructor () {
    this.testRes1 = cveIdMockObj.cvePublic
    this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
  }

  async aggregatePaginate () {
    const res = {
      itemsList: [this.testRes1],
      itemCount: 1,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 1
  }
}

class CveIdGetCveIdNotSecretariatNoQuery {
  constructor () {
    this.testRes1 = cveIdMockObj.cvePublic
    this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
    this.testRes2 = cveIdMockObj.cveDummy1
    this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
  }

  async aggregatePaginate () {
    const res = {
      itemsList: [this.testRes1, this.testRes2],
      itemCount: 2,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 2
  }
}

class CveIdGetCveIdSecretariatNoQuery {
  constructor () {
    this.testRes1 = cveIdMockObj.cvePublic
    this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
    this.testRes2 = cveIdMockObj.cveDummy1
    this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
    this.testRes3 = cveIdMockObj.cveDummy2
    this.testRes3.owning_cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes3.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes3.requested_by.user = cveIdMockObj.secretariatUser.username
    this.testRes4 = cveIdMockObj.cveDummy3
    this.testRes4.owning_cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes4.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes4.requested_by.user = cveIdMockObj.secretariatUser.username
    this.testRes5 = cveIdMockObj.cveDummy4
    this.testRes5.owning_cna = cveIdMockObj.org.short_name
    this.testRes5.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes5.requested_by.user = cveIdMockObj.secretariatUser.username
  }

  async aggregatePaginate () {
    const res = {
      itemsList: [this.testRes1, this.testRes2, this.testRes3, this.testRes4, this.testRes5],
      itemCount: 5,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 5
  }
}

class CveIdGetCveIdRequestedNotChanged {
  constructor () {
    this.testRes1 = cveIdMockObj.cvePublic
    this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
    this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
    this.testRes2 = cveIdMockObj.cveDummy1
    this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
    this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
    this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
  }

  async aggregatePaginate () {
    const res = {
      itemsList: [this.testRes1, this.testRes2],
      itemCount: 2,
      itemsPerPage: 1000,
      currentPage: 1,
      pageCount: 1,
      pagingCounter: 1,
      hasPrevPage: false,
      hasNextPage: false,
      prevPage: null,
      nextPage: null
    }
    return res
  }

  async countDocuments () {
    return 2
  }
}

class CveIdModifyCveIdDoesntExist {
  async findOneByCveId () {
    return null
  }
}

class CveIdModifyCveIdOrgAndStateModified {
  async findOneByCveId () {
    return cveIdMockObj.cveReserved
  }

  async findOneAndUpdate (query, updatedCveId) {
    return updatedCveId
  }
}

class CveIdModifyCveIdNoQuery {
  constructor () {
    this.testRes1 = cveIdMockObj.cveReject
    this.testRes1.owning_cna = cveIdMockObj.org.UUID
  }

  async findOneByCveId () {
    return this.testRes1
  }

  async findOneAndUpdate (query, updatedCveId) {
    return updatedCveId
  }
}

class CveIdReserveSequentialYearDoesntExist {
  async countDocuments () {
    return 2
  }
}

class CveIdReserveSequentialPriorityIsFull {
  async insertMany () {
    return null
  }

  async countDocuments () {
    return 0
  }
}

class CveIdReserveSequentialIsFull {
  async countDocuments () {
    return 2
  }
}

class CveIdReserveSequential {
  async insertMany () {
    return null
  }

  async countDocuments () {
    return 2
  }
}

class CveIdReserveNonSequentialIsFull {
  async countDocuments () {
    return 0
  }
}

class CveIdReservePoolIncremented10Ids {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIds
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseAB1 {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsAB
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseAB2 {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsAB
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseAB3 {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsAB
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 10
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}
class CveIdReservePoolIncremented10IdsCaseA {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsA
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseB {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsB
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseCD {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsC
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseE {
  constructor () {
    this.docs = cveIdNonSeqMockObj.cveIdsE
  }

  getCveIdDocuments () {
    return this.docs
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseF {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsF
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

class CveIdReservePoolIncremented10IdsCaseG {
  constructor () {
    this.docs = cveIdNonSeqMockObj.availableCveIdsG
  }

  getCveIdDocuments () {
    return this.docs
  }

  async insertMany (documents) {
    documents.forEach(doc => {
      this.docs.push(doc)
    })
    return documents
  }

  async countDocuments () {
    return 0
  }

  async find (query, options) {
    const res = []
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_year.toString() === query.cve_year && this.docs[i].state === query.state) {
        if (res.length < options.limit) {
          res.push(this.docs[i])
        }
      }
    }

    if (res.length === 0) {
      return []
    }

    return res
  }

  async findOneAndUpdate (query, updatedCveId) {
    let index = -1
    for (let i = 0; i < this.docs.length; i++) {
      if (this.docs[i].cve_id === query.cve_id && this.docs[i].state === query.state) {
        index = i
        break
      }
    }

    if (index >= 0) {
      this.docs[index] = updatedCveId
      return this.docs[index]
    }

    return null
  }
}

/* -------- Cve Id Range Repositories -------- */
class CveIdRangeReserveYearDoesntExist {
  async findOne () {
    return null
  }
}

class CveIdRangeReserveSequentialPriorityIsFull {
  constructor () {
    this.year = '2021'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.priority.top_id = this.cveIdRange.ranges.priority.end
    this.cveIdRange.ranges.general.top_id = this.cveIdRange.ranges.general.end - 1
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.priority.top_id'] !== undefined &&
    this.cveIdRange.ranges.priority.top_id < this.cveIdRange.ranges.priority.end) {
      this.cveIdRange.ranges.priority.top_id += set.$inc['ranges.priority.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end > this.cveIdRange.ranges.general.top_id) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveSequentialIsFull {
  constructor () {
    this.year = '2021'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.priority.top_id = this.cveIdRange.ranges.priority.end
    this.cveIdRange.ranges.general.top_id = this.cveIdRange.ranges.general.end
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate () {
    return null
  }
}

class CveIdRangeReserveNonSequentialSuccess {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 20005
    this.cveIdRange.ranges.general.end = 30000
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseAB1 {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 0
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 25
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and !== undefined) {
      if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
        this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
        return this.cveIdRange
      } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
        this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
        return this.cveIdRange
      }
    } else if (query.cve_year === this.year) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseAB2 {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 25
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 25
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and !== undefined) {
      if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
        this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
        return this.cveIdRange
      } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
        this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
        return this.cveIdRange
      }
    } else if (query.cve_year === this.year) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseAB3 {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 25
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 25
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and !== undefined) {
      if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
        this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
        return this.cveIdRange
      } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
        this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
        return this.cveIdRange
      }
    } else if (query.cve_year === this.year) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseA {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 20005
    this.cveIdRange.ranges.general.end = 30000
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseB {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 20005
    this.cveIdRange.ranges.general.end = 30000
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseC {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 1
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 10
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseD {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 10
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 10
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseE {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 10
    this.cveIdRange.ranges.general.start = 0
    this.cveIdRange.ranges.general.end = 10
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }
}

class CveIdRangeReserveNonSequentialCaseF {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 15
    this.cveIdRange.ranges.general.end = 20
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and !== undefined) {
      if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
        this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
        return this.cveIdRange
      } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
        this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
        return this.cveIdRange
      }
    } else if (query.cve_year === this.year) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveNonSequentialSuccessCaseG {
  constructor () {
    this.year = '3000'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.general.top_id = 15
    this.cveIdRange.ranges.general.end = 20
  }

  getCveIdRange () {
    return this.cveIdRange
  }

  async findOne (query) {
    expect(query).to.have.property('cve_year').and.to.be.a('string')
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and !== undefined) {
      if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
      this.cveIdRange.ranges.general.end >= query.$and[1]['ranges.general.end'].$gte) {
        this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
        return this.cveIdRange
      } else if (query.$and[0].cve_year === this.year && set.$inc['ranges.general.top_id'] !== undefined) {
        this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
        return this.cveIdRange
      }
    } else if (query.cve_year === this.year) {
      this.cveIdRange.ranges.general.top_id = set.$set['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveSequential {
  constructor () {
    this.year = '2020'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.priority.top_id = 2 // already has two reserved cve ids
    this.cveIdRange.ranges.priority.end = 10
    this.cveIdRange.ranges.general.top_id = this.cveIdRange.ranges.priority.end
    this.cveIdRange.ranges.general.start = this.cveIdRange.ranges.general.top_id
    this.cveIdRange.ranges.general.end = 15
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end > this.cveIdRange.ranges.general.top_id + 5 - 1) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRangeReserveSequentialPriority {
  constructor () {
    this.year = '2020'
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = this.year
    this.cveIdRange.ranges.priority.top_id = 0
    this.cveIdRange.ranges.general.top_id = this.cveIdRange.ranges.priority.end
  }

  async findOne () {
    return this.cveIdRange
  }

  async findOneAndUpdate (query, set) {
    if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.priority.top_id'] !== undefined &&
    this.cveIdRange.ranges.priority.top_id < this.cveIdRange.ranges.priority.end) {
      this.cveIdRange.ranges.priority.top_id += set.$inc['ranges.priority.top_id']
      return this.cveIdRange
    } else if (query.$and[0].cve_year === this.year && query.$and[1]['ranges.general.end'] !== undefined &&
    this.cveIdRange.ranges.general.end > this.cveIdRange.ranges.general.top_id) {
      this.cveIdRange.ranges.general.top_id += set.$inc['ranges.general.top_id']
      return this.cveIdRange
    }

    return null
  }
}

class CveIdRange2022NotExists {
  async findOne () {
    return null
  }

  async findOneAndUpdate () {
    return null
  }
}

class CveIdRange2022Exists {
  constructor () {
    this.cveIdRange = Object.assign({}, CONSTANTS.DEFAULT_CVE_ID_RANGE)
    this.cveIdRange.cve_year = '2022'
  }

  async findOne () {
    return this.cveIdRange
  }
}

/* -------- User Repositories -------- */
class NullUserRepo {
  async getUserUUID () {
    return null
  }

  async findOneByUserNameAndOrgUUID () {
    return null
  }

  async isAdmin () {
    return null
  }
}

class UserNotCreatedAlreadyExists {
  async findOneByUserNameAndOrgUUID () {
    return orgMockObj.existentUser
  }

  async isAdminUUID () {
    return false
  }
}

class UserNotCreated {
  async isAdminUUID () {
    return true
  }
}

class UserCreatedWithRole {
  async findOneByUserNameAndOrgUUID () {
    return null
  }

  async isAdminUUID () {
    return false
  }

  async updateByUserNameAndOrgUUID () {
    return null
  }

  async getUserUUID () {
    return null
  }
}

class UserCreatedAdminWithRole {
  async findOneByUserNameAndOrgUUID () {
    return null
  }

  async isAdminUUID () {
    return true
  }

  async updateByUserNameAndOrgUUID () {
    return null
  }

  async getUserUUID () {
    return null
  }
}

class UserCreatedOrgUndefined {
  async findOneByUserNameAndOrgUUID () {
    return null
  }

  async updateByUserNameAndOrgUUID () {
    return null
  }

  async getUserUUID () {
    return null
  }

  async isAdminUUID () {
    return false
  }
}

class UserNotUpdatedUserDoesntExist {
  async findOneByUserNameAndOrgUUID () {
    return null
  }

  async isAdmin () {
    return null
  }
}

class UserNotUpdatedOrgQueryDoesntExist {
  async findOneByUserNameAndOrgUUID () {
    return orgMockObj.existentUser
  }

  async isAdmin () {
    return null
  }
}

class UserUpdatedAddingRole {
  constructor () {
    this.user = {
      org_UUID: orgMockObj.existentUserDummy.org_UUID,
      username: orgMockObj.existentUserDummy.username,
      UUID: orgMockObj.existentUserDummy.UUID,
      active: orgMockObj.existentUserDummy.active,
      name: orgMockObj.existentUserDummy.name,
      authority: {
        active_roles: []
      },
      secret: orgMockObj.existentUserDummy.secret
    }
  }

  getUser () {
    this.user.authority.active_roles.push(CONSTANTS.USER_ROLE_ENUM.ADMIN)
    return this.user
  }

  async findOneByUserNameAndOrgUUID () {
    return this.user
  }

  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return this.user.UUID
  }

  async isAdmin () {
    return true
  }
}

class UserUpdatedAddingRoleAlreadyExists {
  constructor () {
    this.user = {
      org_UUID: orgMockObj.existentUserDummy.org_UUID,
      username: orgMockObj.existentUserDummy.username,
      UUID: orgMockObj.existentUserDummy.UUID,
      active: orgMockObj.existentUserDummy.active,
      name: orgMockObj.existentUserDummy.name,
      authority: {
        active_roles: [CONSTANTS.USER_ROLE_ENUM.ADMIN]
      },
      secret: orgMockObj.existentUserDummy.secret
    }
  }

  getUser () {
    return this.user
  }

  async findOneByUserNameAndOrgUUID () {
    return this.user
  }

  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return this.user.UUID
  }

  async isAdmin () {
    return false
  }
}

class UserUpdatedRemovingRole {
  constructor () {
    this.user = {
      org_UUID: orgMockObj.existentUserDummy.org_UUID,
      username: orgMockObj.existentUserDummy.username,
      UUID: orgMockObj.existentUserDummy.UUID,
      active: orgMockObj.existentUserDummy.active,
      name: orgMockObj.existentUserDummy.name,
      authority: {
        active_roles: [CONSTANTS.USER_ROLE_ENUM.ADMIN]
      },
      secret: orgMockObj.existentUserDummy.secret
    }
  }

  getUser () {
    this.user.authority.active_roles.splice(0, 1)
    return this.user
  }

  async findOneByUserNameAndOrgUUID () {
    return this.user
  }

  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return this.user.UUID
  }

  async isAdmin () {
    return false
  }
}

class UserUpdatedRemovingRoleAlreadyRemoved {
  constructor () {
    this.user = {
      org_UUID: orgMockObj.existentUserDummy.org_UUID,
      username: orgMockObj.existentUserDummy.username,
      UUID: orgMockObj.existentUserDummy.UUID,
      active: orgMockObj.existentUserDummy.active,
      name: orgMockObj.existentUserDummy.name,
      authority: orgMockObj.existentUserDummy.authority,
      secret: orgMockObj.existentUserDummy.secret
    }
  }

  getUser () {
    return this.user
  }

  async findOneByUserNameAndOrgUUID () {
    return this.user
  }

  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return this.user.UUID
  }

  async isAdmin () {
    return false
  }
}

class UserNotUpdatedNoQuery {
  async findOneByUserNameAndOrgUUID () {
    return orgMockObj.existentUser
  }

  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return orgMockObj.existentUser.UUID
  }

  async isAdmin () {
    return false
  }
}

class UserOrgCveIdUpdated {
  async findOneByUserNameAndOrgUUID () {
    return cveIdMockObj.owningOrgUser
  }

  async find () {
    return []
  }

  async updateByUserNameAndOrgUUID () {
    cveIdMockObj.owningOrgUser.org_UUID = cveIdMockObj.org.UUID
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return null
  }
}

class UserGetUserCveIdUpdated {
  async aggregate () {
    return [cveIdMockObj.owningOrgUser]
  }
}

class UserSecretNotResetUserDoesntExist {
  async updateByUserNameAndOrgUUID () {
    return { n: 0, nModified: 0, ok: 1 }
  }

  async isAdmin () {
    return false
  }
}

class UserSecretReset {
  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID (userName, orgUUID) {
    if (userName === orgMockObj.userC.username && orgUUID === orgMockObj.userC.org_UUID) {
      return orgMockObj.userC.UUID
    } else if (userName === orgMockObj.userB.username && orgUUID === orgMockObj.userB.org_UUID) {
      return orgMockObj.userB.UUID
    }

    return orgMockObj.userA.UUID
  }

  async isAdmin (username, shortname) {
    if (username === orgMockObj.userD.username && shortname === orgMockObj.existentOrgDummy.short_name) {
      return true
    } else if (username === orgMockObj.userA.username && shortname === orgMockObj.existentOrgDummy.short_name) {
      return true
    }

    return false
  }
}

class UserSecretResetNotAdmin {
  async updateByUserNameAndOrgUUID () {
    return { n: 1, nModified: 1, ok: 1 }
  }

  async getUserUUID () {
    return null
  }

  async isAdmin () {
    return false
  }
}

class UserGetUser {
  async aggregate (aggregation) {
    if (aggregation[0].$match.username === orgMockObj.existentUser.username &&
      aggregation[0].$match.org_UUID === orgMockObj.existentUser.org_UUID) {
      return [orgMockObj.existentUser]
    } else if (aggregation[0].$match.username === orgMockObj.existentUserDummy.username &&
      aggregation[0].$match.org_UUID === orgMockObj.existentUserDummy.org_UUID) {
      return [orgMockObj.existentUserDummy]
    }

    return []
  }
}

class UserGetUserUpdated {
  async aggregate () {
    const testRes = orgMockObj.owningOrgUser
    testRes.org_UUID = orgMockObj.org.UUID
    return [testRes]
  }
}

class UserGetUserDoesntExist {
  async aggregate () {
    return []
  }
}

class UserGetCveIdOwningOrg {
  async findOneByUUID () {
    return cveIdMockObj.owningOrgUser
  }
}

class UserGetCveIdRequestorSecretariat {
  async findOneByUUID (uuid) {
    if (uuid === cveIdMockObj.secretariatUser.UUID) {
      return cveIdMockObj.secretariatUser
    } else {
      return cveIdMockObj.owningOrgUser
    }
  }
}

class UserModifyCveIdOrgAndStateModified {
  async findOneByUUID () {
    return cveIdMockObj.owningOrgUser
  }

  async getUserUUID () {
    return cveIdMockObj.secretariatUser.UUID
  }
}

class UserReserveSequentialPriorityIsFull {
  async findOneByUserNameAndOrgUUID () {
    return cveIdMockObj.owningOrgUser
  }
}

class UserReserveNonSequentialSuccess {
  async findOneByUserNameAndOrgUUID () {
    return cveIdNonSeqMockObj.userA
  }
}

class UserReserveNonSequentialSuccessCaseAB {
  async findOneByUserNameAndOrgUUID (username) {
    if (username === cveIdNonSeqMockObj.userA.username) {
      return cveIdNonSeqMockObj.userA
    }

    return cveIdNonSeqMockObj.userB
  }
}

class UserReserveNonSequentialSuccessCaseA {
  async findOneByUserNameAndOrgUUID () {
    return cveIdNonSeqMockObj.userA
  }
}

class UserReserveNonSequentialSuccessCaseB {
  async findOneByUserNameAndOrgUUID (username) {
    if (username === cveIdNonSeqMockObj.secretariatUser.username) {
      return cveIdNonSeqMockObj.secretariatUser
    }

    return cveIdNonSeqMockObj.userA
  }
}

class UserReserveNonSequentialSuccessCaseE {
  async findOneByUserNameAndOrgUUID (username) {
    if (username === cveIdNonSeqMockObj.secretariatUser.username) {
      return cveIdNonSeqMockObj.secretariatUser
    }

    return cveIdNonSeqMockObj.userA
  }
}

class UserReserveNonSequentialCaseF {
  async findOneByUserNameAndOrgUUID (username) {
    if (username === cveIdNonSeqMockObj.secretariatUser.username) {
      return cveIdNonSeqMockObj.secretariatUser
    }

    return cveIdNonSeqMockObj.userA
  }
}

class UserReserveNonSequentialSuccessCaseG {
  async findOneByUserNameAndOrgUUID (username) {
    if (username === cveIdNonSeqMockObj.secretariatUser.username) {
      return cveIdNonSeqMockObj.secretariatUser
    }

    return cveIdNonSeqMockObj.userA
  }
}

class UserValidateUserSuccess {
  async findOneByUserNameAndOrgUUID () {
    return mwMockObj.existentUser
  }
}

class UserValidateUserDeactivated {
  async findOneByUserNameAndOrgUUID () {
    return mwMockObj.deactivatedUser
  }
}

class UserOnlySecretariatOrAdmin {
  async isAdmin (username, shortname) {
    if (username === mwSecretariatOrAdminMockObj.secretariatUser.username && shortname === mwSecretariatOrAdminMockObj.secretariatOrg.short_name) {
      return false
    } else if (username === mwSecretariatOrAdminMockObj.regularUser.username && shortname === mwSecretariatOrAdminMockObj.notSecretariatOrg.short_name) {
      return false
    }

    return true
  }
}

module.exports = {
  NullOrgRepo,
  OrgCreated,
  OrgCreatedWhenRolesDefined,
  OrgNotCreatedAlreadyExists,
  OrgNotUpdatedDoesNotExist,
  OrgNotUpdatedShortNameExists,
  OrgNotUpdatedIdQuotaUndefined,
  OrgNotUpdatedNoQueryParameters,
  OrgGet,
  OrgSecretariatIdQuota,
  OrgOwnerIdQuota,
  OrgNotOwnerOrSecretariatIdQuota,
  OrgDoesNotExistIdQuota,
  OrgExceedsMinIdQuota,
  OrgExceedsMaxIdQuota,
  OrgCantCreateUserOrgDoesNotExist,
  OrgCantCreateUserOrgDoesNotMatch,
  OrgCreatedUserOrgUndefined,
  OrgCantCreateUserNotSecretariatOrAdmin,
  OrgCreatedUserWithRole,
  OrgCreatedUserAdminWithRole,
  OrgUserNotUpdatedOrgDoesntExist,
  OrgUserNotUpdatedUserDoesntExist,
  OrgUserNotUpdatedOrgQueryDoesntExist,
  OrgUserUpdatedAddingRole,
  OrgUserCveIdUpdated,
  OrgGetUserCveIdUpdated,
  OrgUserSecretNotResetOrgDoesntExist,
  OrgUserSecretNotResetUserDoesntExist,
  OrgUserSecretReset,
  OrgUserSecretResetNotSecretariat,
  UserSecretResetNotAdmin,
  OrgGetUserOrgDoesntExist,
  OrgGetUser,
  OrgGetUserUpdated,
  OrgGetCveIdNotOwnerOrgNotReserved,
  OrgGetCveIdNotOwnerOrgReserved,
  OrgGetCveIdOwningOrg,
  OrgGetCveIdRequestorSecretariat,
  OrgGetCveIdNoCveIdsWithParams,
  OrgGetCveIdRequestorSecretariatNoQuery,
  OrgGetCveIdRequestedNotChanged,
  OrgModifyCveIdDoesntExist,
  OrgModifyCveIdOrgDoesntExist,
  OrgModifyCveIdOrgAndStateModified,
  OrgReserveNotOwningOrg,
  OrgReserveShortNameUndefined,
  OrgReserveOrgDoesntExist,
  OrgReserveAmountLargerThanNonSequential,
  OrgReserveAmountGreaterIdQuota,
  OrgReserveYear2025RangeDoesntExist,
  OrgReserveSequentialPriorityIsFull,
  OrgReserveSequentialIsFull,
  OrgReserveNonSequentialYearDoesntExist,
  OrgReserveNonSequentialSuccess,
  OrgReserveNonSequentialSuccessCaseAB,
  OrgReserveNonSequentialSuccessCaseA,
  OrgReserveNonSequentialSuccessCaseB,
  OrgReserveNonSequentialSuccessCaseD,
  OrgReserveNonSequentialSuccessCaseE,
  OrgReserveNonSequentialCaseF,
  OrgReserveNonSequentialSuccessCaseG,
  OrgReserveYear2025RangeDoesntExistSequential,
  OrgValidateUserSuccess,
  OrgValidateOrgDoesntExist,
  OrgOnlyCnasOrgCnaPass,
  OrgOnlyCnasOrgCnaSecretariatPass,
  OrgOnlyCnasOrgSecretariatPass,
  OrgOnlyCnasOrgNotCnaReject,
  OrgOnlySecretariatPass,
  OrgOnlySecretariatReject,
  OrgOnlySecretariatOrAdmin,
  NullCveIdRepo,
  CveIdGetCveIdDoesntExist,
  CveIdGetCveIdAvailable,
  CveIdGetCveIdNotOwningOrg,
  CveIdGetCveIdNotOwningOrgNotReserved,
  CveIdGetCveIdOwningOrg,
  CveIdSecretariatIdQuota,
  CveIdOwnerIdQuota,
  CveIdExceedsMinQuota,
  CveIdExceedsMaxQuota,
  CveIdGetCveIdNoResultsWithParams,
  CveIdGetCveIdStateProvided,
  CveIdGetCveIdNoAvailableCves,
  CveIdGetCveIdYearProvided,
  CveIdGetCveIdNotSecretariatNoQuery,
  CveIdGetCveIdSecretariatNoQuery,
  CveIdGetCveIdRequestedNotChanged,
  CveIdModifyCveIdDoesntExist,
  CveIdModifyCveIdOrgAndStateModified,
  CveIdModifyCveIdNoQuery,
  CveIdRangeReserveYearDoesntExist,
  CveIdReserveSequentialYearDoesntExist,
  CveIdReserveSequentialPriorityIsFull,
  CveIdReserveSequential,
  CveIdReserveNonSequentialIsFull,
  CveIdReserveSequentialIsFull,
  CveIdRangeReserveSequentialIsFull,
  CveIdRangeReserveSequential,
  CveIdReservePoolIncremented10Ids,
  CveIdReservePoolIncremented10IdsCaseAB1,
  CveIdReservePoolIncremented10IdsCaseAB2,
  CveIdReservePoolIncremented10IdsCaseAB3,
  CveIdReservePoolIncremented10IdsCaseA,
  CveIdReservePoolIncremented10IdsCaseB,
  CveIdReservePoolIncremented10IdsCaseCD,
  CveIdReservePoolIncremented10IdsCaseE,
  CveIdReservePoolIncremented10IdsCaseF,
  CveIdReservePoolIncremented10IdsCaseG,
  CveIdRangeReserveSequentialPriorityIsFull,
  CveIdRangeReserveSequentialPriority,
  CveIdRangeReserveNonSequentialSuccess,
  CveIdRangeReserveNonSequentialSuccessCaseAB1,
  CveIdRangeReserveNonSequentialSuccessCaseAB2,
  CveIdRangeReserveNonSequentialSuccessCaseAB3,
  CveIdRangeReserveNonSequentialSuccessCaseA,
  CveIdRangeReserveNonSequentialSuccessCaseB,
  CveIdRangeReserveNonSequentialSuccessCaseC,
  CveIdRangeReserveNonSequentialSuccessCaseD,
  CveIdRangeReserveNonSequentialSuccessCaseE,
  CveIdRangeReserveNonSequentialCaseF,
  CveIdRangeReserveNonSequentialSuccessCaseG,
  CveIdRange2022NotExists,
  CveIdRange2022Exists,
  NullUserRepo,
  UserCreatedOrgUndefined,
  UserNotCreatedAlreadyExists,
  UserNotCreated,
  UserCreatedWithRole,
  UserCreatedAdminWithRole,
  UserNotUpdatedUserDoesntExist,
  UserNotUpdatedOrgQueryDoesntExist,
  UserUpdatedAddingRole,
  UserUpdatedAddingRoleAlreadyExists,
  UserUpdatedRemovingRole,
  UserUpdatedRemovingRoleAlreadyRemoved,
  UserNotUpdatedNoQuery,
  UserOrgCveIdUpdated,
  UserGetUserCveIdUpdated,
  UserSecretNotResetUserDoesntExist,
  UserSecretReset,
  UserGetUser,
  UserGetUserUpdated,
  UserGetUserDoesntExist,
  UserGetCveIdOwningOrg,
  UserGetCveIdRequestorSecretariat,
  UserModifyCveIdOrgAndStateModified,
  UserReserveSequentialPriorityIsFull,
  UserReserveNonSequentialSuccess,
  UserReserveNonSequentialSuccessCaseAB,
  UserReserveNonSequentialSuccessCaseA,
  UserReserveNonSequentialSuccessCaseB,
  UserReserveNonSequentialSuccessCaseE,
  UserReserveNonSequentialCaseF,
  UserReserveNonSequentialSuccessCaseG,
  UserValidateUserSuccess,
  UserValidateUserDeactivated,
  UserOnlySecretariatOrAdmin
}
