// unique name endpoints
// repository per test
// register each endpoint
const RepositoryFactory = require('../src/repositories/repositoryFactory')
const chai = require('chai')
const expect = chai.expect

/* -------- Org Repositories -------- */
class OrgCreatedWhenUuidUndefined {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {
        // This is where you can actually write some test assertions!

        // For instance, you can even inspect the settings object to make sure the code passes upsert as true.

        // Or more importantly, you can make sure UUID isn't null or something and you can inspect all the fields on the org object
        // to make sure it's exactly what should be sent to the database.

        // But at a bare minimum, you can simply return null because the code isn't actually inspecting the return here.
        return null
    }

    // Notice that the following two functions are used to get information for logging. We aren't examining the logs in this test,
    // so we can again get by with returning null.
    async getOrgUUID() {
        return null
    }

}

class OrgCreatedWhenUuidNull {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCreatedWhenUuidDefined {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCreatedWhenRolesDefined {
    constructor(){
        this.repos = new RepositoryFactory()
        this.orgRepo = this.repos.getOrgRepository()
    }

    async findOneByShortName(shortname) {
        expect(shortname).to.be.a('string')
        const org = await this.orgRepo.findOneByShortName(shortname)
        expect(org).to.be.a('null')
        return org
    }

    async updateByOrgUUID(uuid, org, settings) {
        expect(settings).to.have.property('upsert').and.to.be.a('boolean')
        await this.orgRepo.updateByOrgUUID(uuid, org, settings)
        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCreatedWhenRolesUndefinedIdQuotaDefined {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCreatedWhenIdQuotaUndefined {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCreatedWhenIdQuotaNull {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgNotCreatedAlreadyExists {
    constructor(){
        this.repos = new RepositoryFactory()
        this.orgRepo = this.repos.getOrgRepository()
    }

    async findOneByShortName(shortname) {
        expect(shortname).to.be.a('string')
        const org = await this.orgRepo.findOneByShortName(shortname)
        expect(org).to.have.property('short_name').and.to.be.a('string')
        return org
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgNotUpdatedDoesNotExist {
    constructor(){
        this.repos = new RepositoryFactory()
        this.orgRepo = this.repos.getOrgRepository()
    }

    async findOneByShortName(shortname) {
        expect(shortname).to.be.a('string')
        const org = await this.orgRepo.findOneByShortName(shortname)
        expect(org).to.be.a('null')
        return org
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgNotUpdatedShortNameExists {
    constructor(){
        this.repos = new RepositoryFactory()
        this.orgRepo = this.repos.getOrgRepository()
    }

    async findOneByShortName(shortname) {
        expect(shortname).to.be.a('string')
        const org = await this.orgRepo.findOneByShortName(shortname)
        expect(org).to.have.property('short_name').and.to.be.a('string')
        return org
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgNotUpdatedIdQuotaUndefined {
    constructor(){
        this.repos = new RepositoryFactory()
        this.orgRepo = this.repos.getOrgRepository()
    }

    async findOneByShortName(shortname) {
        expect(shortname).to.be.a('string')
        const org = await this.orgRepo.findOneByShortName(shortname)
        expect(org).to.have.property('short_name').and.to.be.a('string')
        return org
    }

    async updateByOrgUUID(uuid, org, settings) {
        expect(settings).to.be.an('undefined')
        expect(uuid).to.be.a('string')
        const result = await this.orgRepo.updateByOrgUUID(uuid, org, settings)
        return result
    }

    async getOrgUUID() {
        return null
    }
}

class OrgNotUpdatedNoQueryParameters {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgCantGetDoesNotExist {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgGetDoesExist {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

class OrgSecretariatIdQuota {
    constructor(){}

    async findOneByShortName(shortname) {
        return null
    }

    async updateByOrgUUID(uuid, org, settings) {

        return null
    }

    async getOrgUUID() {
        return null
    }
}

/* -------- User Repositories -------- */
class NullUserRepo {
    constructor(){}

    async getUserUUID() {
        return null
    }
}

module.exports = {
    OrgCreatedWhenUuidUndefined,
    OrgCreatedWhenUuidNull,
    OrgCreatedWhenUuidDefined,
    OrgCreatedWhenRolesDefined,
    OrgCreatedWhenRolesUndefinedIdQuotaDefined,
    OrgCreatedWhenIdQuotaUndefined,
    OrgCreatedWhenIdQuotaNull,
    OrgNotCreatedAlreadyExists,
    OrgNotUpdatedDoesNotExist,
    OrgNotUpdatedShortNameExists,
    OrgNotUpdatedIdQuotaUndefined,
    OrgNotUpdatedNoQueryParameters,
    OrgCantGetDoesNotExist,
    OrgGetDoesExist,
    OrgSecretariatIdQuota,
    NullUserRepo
}
