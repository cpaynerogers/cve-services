const Org = require('../model/org')
const User = require('../model/user')
const CONSTANTS = require('../constants')

async function getOrgUUID (shortName) {
  const org = await Org.findOne().byShortName(shortName)
  let result = null
  if (org) {
    result = org.UUID
  }
  return result
}

async function getUserUUID (userName, orgUUID) {
  const user = await User.findOne().byUserNameAndOrgUUID(userName, orgUUID)
  let result = null
  if (user) {
    result = user.UUID
  }
  return result
}

async function isSecretariat (shortName) {
  let result = false
  const orgUUID = await getOrgUUID(shortName) // may be null if org does not exists
  const secretariats = await Org.find({ 'authority.active_roles': { $in: [CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT] } })

  if (orgUUID) {
    secretariats.forEach((obj) => {
      if (obj.UUID === orgUUID) {
        result = true // org is secretariat
      }
    })
  }

  return result // org is not secretariat
}

async function isSecretariatUUID (orgUUID) {
  let result = false
  const secretariats = await Org.find({ 'authority.active_roles': { $in: [CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT] } })

  if (orgUUID) {
    secretariats.forEach((obj) => {
      if (obj.UUID === orgUUID) {
        result = true // org is secretariat
      }
    })
  }

  return result // org is not secretariat
}

async function isAdmin (requesterUsername, requesterShortName) {
  let result = false
  const requesterOrgUUID = await getOrgUUID(requesterShortName) // may be null if org does not exists

  if (requesterOrgUUID) {
    const user = await User.findOne().byUserNameAndOrgUUID(requesterUsername, requesterOrgUUID)

    if (user) {
      result = user.authority.active_roles.includes(CONSTANTS.USER_ROLE_ENUM.ADMIN)
    }
  }

  return result // org is not secretariat
}

async function isAdminUUID (requesterUsername, requesterOrgUUID) {
  let result = false

  if (requesterOrgUUID) {
    const user = await User.findOne().byUserNameAndOrgUUID(requesterUsername, requesterOrgUUID)

    if (user) {
      result = user.authority.active_roles.includes(CONSTANTS.USER_ROLE_ENUM.ADMIN)
    }
  }

  return result // org is not secretariat
}

function reqCtxMapping (req, keyType, keys) {
  if (!(keyType in req.ctx)) {
    req.ctx[keyType] = {}
  }

  // request body gets mapped to request context
  // while query parameters or headers are mapped individually
  if (keyType === 'body') {
    if (req[keyType]) {
      req.ctx[keyType] = req[keyType]
    }
  } else {
    keys.forEach(k => {
      if (k in req[keyType]) {
        req.ctx[keyType][k] = req[keyType][k]
      }
    })
  }
}

function isEmptyObject (obj) {
  return !Object.keys(obj).length
}

module.exports = {
  isSecretariat,
  isAdmin,
  isAdminUUID,
  isEmptyObject,
  isSecretariatUUID,
  getOrgUUID,
  getUserUUID,
  reqCtxMapping
}
