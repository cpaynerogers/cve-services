const CONSTANTS = require('../constants')

const definitions = {
  data_type: {
    enum: [
      'CVE'
    ]
  },
  data_format: {
    enum: [
      'MITRE'
    ]
  },
  data_version: {
    enum: [
      '4.0'
    ]
  },
  state_public: {
    enum: [
      CONSTANTS.CVE_STATES.PUBLIC
    ]
  },
  state_reserved: {
    enum: [
      CONSTANTS.CVE_STATES.RESERVED
    ]
  },
  state_rejected: {
    enum: [
      CONSTANTS.CVE_STATES.REJECT
    ]
  },
  cve_id: {
    type: 'string',
    pattern: '^CVE-[0-9]{4}-[0-9]{4,}$'
  },
  email_address: {
    type: 'string',
    pattern: '^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$'
  },
  lang_string: {
    type: 'object',
    required: [
      'lang',
      'value'
    ],
    properties: {
      lang: {
        type: 'string'
      },
      value: {
        type: 'string',
        maxLength: 3999
      }
    }
  },
  reference: {
    type: 'object',
    required: [
      'url'
    ],
    properties: {
      url: {
        maxLength: 500,
        type: 'string',
        pattern: '^(ftp|http)s?://\\S+$'
      }
    }
  },
  product: {
    type: 'object',
    required: [
      'product_name',
      'version'
    ],
    properties: {
      product_name: {
        type: 'string'
      },
      version: {
        type: 'object',
        required: [
          'version_data'
        ],
        properties: {
          version_data: {
            type: 'array',
            minItems: 1,
            items: {
              type: 'object',
              required: [
                'version_value'
              ],
              properties: {
                version_value: {
                  type: 'string'
                }
              }
            }
          }
        }
      }
    }
  }
}

const reservedOrRejectedSchema = {
  $schema: 'http://json-schema.org/draft-04/schema#',
  type: 'object',
  required: [
    'data_type',
    'data_format',
    'data_version',
    'CVE_data_meta',
    'description'
  ],
  properties: {
    data_type: definitions.data_type,
    data_format: definitions.data_format,
    data_version: definitions.data_version,
    CVE_data_meta: {
      type: 'object',
      required: [
        'ID',
        'ASSIGNER'
      ],
      properties: {
        ID: definitions.cve_id,
        ASSIGNER: definitions.email_address,
        STATE: definitions.state_reserved
      }
    },
    affects: {
      not: {}
    },
    problemtype: {
      not: {}
    },
    references: {
      not: {}
    },
    description: {
      type: 'object',
      required: [
        'description_data'
      ],
      properties: {
        description_data: {
          type: 'array',
          minItems: 1,
          items: definitions.lang_string
        }
      }
    }
  }
}

const reservedSchema = JSON.parse(JSON.stringify(reservedOrRejectedSchema)) // clone the object
const rejectSchema = JSON.parse(JSON.stringify(reservedOrRejectedSchema)) // clone the object
rejectSchema.properties.CVE_data_meta.properties.STATE = definitions.state_rejected

const publicSchema = {
  $schema: 'http://json-schema.org/draft-04/schema#',
  type: 'object',
  required: [
    'data_type',
    'data_format',
    'data_version',
    'CVE_data_meta',
    'affects',
    'problemtype',
    'references',
    'description'
  ],
  properties: {
    data_type: definitions.data_type,
    data_format: definitions.data_format,
    data_version: definitions.data_version,
    CVE_data_meta: {
      type: 'object',
      required: [
        'ID',
        'ASSIGNER'
      ],
      properties: {
        ID: definitions.cve_id,
        ASSIGNER: definitions.email_address,
        STATE: definitions.state_public
      }
    },
    affects: {
      type: 'object',
      required: [
        'vendor'
      ],
      properties: {
        vendor: {
          type: 'object',
          required: [
            'vendor_data'
          ],
          properties: {
            vendor_data: {
              type: 'array',
              minItems: 1,
              items: {
                type: 'object',
                required: [
                  'vendor_name',
                  'product'
                ],
                properties: {
                  vendor_name: {
                    type: 'string'
                  },
                  product: {
                    type: 'object',
                    required: [
                      'product_data'
                    ],
                    properties: {
                      product_data: {
                        type: 'array',
                        minItems: 1,
                        items: definitions.product
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    problemtype: {
      type: 'object',
      required: [
        'problemtype_data'
      ],
      properties: {
        problemtype_data: {
          type: 'array',
          minItems: 1,
          items: {
            type: 'object',
            required: [
              'description'
            ],
            properties: {
              description: {
                type: 'array',
                minItems: 1,
                items: definitions.lang_string
              }
            }
          }
        }
      }
    },
    references: {
      type: 'object',
      required: [
        'reference_data'
      ],
      properties: {
        reference_data: {
          type: 'array',
          maxItems: 500,
          minItems: 1,
          items: definitions.reference
        }
      }
    },
    description: {
      type: 'object',
      required: [
        'description_data'
      ],
      properties: {
        description_data: {
          type: 'array',
          minItems: 1,
          items: definitions.lang_string
        }
      }
    }
  }
}

module.exports = {
  publicSchema,
  reservedSchema,
  rejectSchema
}
