const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./cve-id.controller')
const { param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, toDate } = require('./cve-id.middleware')
const CONSTANTS = require('../../constants')

const CHOICES = [CONSTANTS.CVE_STATES.REJECT, CONSTANTS.CVE_STATES.PUBLIC, CONSTANTS.CVE_STATES.RESERVED]

router.get('/cve-id',
  mw.validateUser,
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(CHOICES),
  query(['cve_id_year']).optional().isNumeric().matches(/^[0-9]{4}$/),
  query(['time_reserved.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_reserved.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  parseError,
  parseGetParams,
  controller.CVEID_GET_FILTER)
router.post('/cve-id',
  mw.validateUser,
  mw.onlyCnas,
  query(['amount']).isInt(),
  query(['batch_type']).optional().isString().trim().escape().customSanitizer(val => { return val.toLowerCase() }),
  query(['short_name']).isString().trim().escape(),
  query(['cve_year']).isNumeric().matches(/^[0-9]{4}$/),
  parseError,
  parsePostParams,
  controller.CVEID_RESERVE)
router.get('/cve-id/:id',
  mw.validateUser,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/, 'i'),
  parseError,
  parseGetParams,
  controller.CVEID_GET_SINGLE)
router.put('/cve-id/:id',
  mw.onlySecretariat,
  mw.validateUser,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/, 'i'),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(CHOICES),
  query(['org']).optional().isString().trim().escape(),
  parseError,
  parsePostParams,
  controller.CVEID_UPDATE_SINGLE)
router.post('/cve-id-range/:year',
  mw.onlySecretariat,
  mw.validateUser,
  param(['year']).isNumeric().matches(/^[0-9]{4}$/),
  parseError,
  parsePostParams,
  controller.CVEID_RANGE_CREATE)

module.exports = router
