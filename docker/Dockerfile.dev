FROM node:14-alpine3.12
# do not copy files we mount in compose
# our local and production docker files could co-exist using "targets" in
# the `FROM` statements

LABEL \
    mitre.name=cveawg \
    mitre.project=cveawg \
    mitre.maintainer=mbianchi@mitre.org

WORKDIR /app

# Install python/pip (required for argon2 build from source)
ENV PYTHONUNBUFFERED=1
RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
RUN pip3 install \
    --trusted-host files.pythonhosted.org \
    --trusted-host pypi.python.org \
    --trusted-host pypi.org \
    --no-cache --upgrade pip setuptools

# Install build essentials (also required for argon2)
RUN apk add --update --no-cache build-base

# copy into development container only what we need to have
# defined before running the application
COPY config /app/config
COPY datadump/pre-population /app/datadump/pre-population
COPY docker/entrypoint.sh /app/entrypoint.sh
COPY docs /app/docs

# Change db hostname from localhost to docdb for use inside docker
COPY docker/default.json-docker /app/config/default.json

# include the package-lock file so npm "honors" it; remove it if
# a new lock should be generated from within docker
COPY package-lock.json /app
COPY package.json /app

RUN npm install
RUN echo '{}' > /app/config/development.json
RUN echo '{}' > /app/config/integration.json
RUN echo '{}' > /app/config/production.json
RUN echo '{}' > /app/config/test.json

# we don't need to expose ports that are exposed in our compose file
ENTRYPOINT '/app/entrypoint.sh'
