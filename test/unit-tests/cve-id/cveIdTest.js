const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const CONSTANTS = require('../../../src/constants')
const secretariatHeader = require('./mockObjects.cve-id').secretariatHeader
const owningOrgHeader = require('./mockObjects.cve-id').owningOrgHeader
const orgHeader = require('./mockObjects.cve-id').orgHeader
const secretariatOrg = require('./mockObjects.cve-id').secretariatOrg
const secretariatUser = require('./mockObjects.cve-id').secretariatUser
const owningOrg = require('./mockObjects.cve-id').owningOrg
const owningOrgUser = require('./mockObjects.cve-id').owningOrgUser
const org = require('./mockObjects.cve-id').org
const nonExistentOrg = require('./mockObjects.cve-id').nonExistentOrg
const cvePublic = require('./mockObjects.cve-id').cvePublic
const errors = require('../../../src/controller/cve-id.controller/error')
const error = new errors.CveIdControllerError()
const cveIdDummy1 = require('./mockObjects.cve-id').cveDummy1
const cveIdDummy2 = require('./mockObjects.cve-id').cveDummy2
const cveIdDummy3 = require('./mockObjects.cve-id').cveDummy3
const cveIdDummy4 = require('./mockObjects.cve-id').cveDummy4
const cveIdDummy5 = require('./mockObjects.cve-id').cveDummy5
const cveId = require('./mockObjects.cve-id').cveId
const cveIdYear = require('./mockObjects.cve-id').cveIdYear
const nonExistentCveId = 'CVE-2017-35437'

const cveIdMockObj = require('./mockObjects.cve-id')
const cveIdController = require('../../../src/controller/cve-id.controller/cve-id.controller')
const cveIdParams = require('../../../src/controller/cve-id.controller/cve-id.middleware')

describe('Test ID Reservator Endpoints', () => {
  context('Getting a cve id', () => {
    it('Cve does not exist', (done) => {
      chai.request(server)
        .get(`/cve-id-doesnt-exist/${nonExistentCveId}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(nonExistentCveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve is available', (done) => {
      chai.request(server)
        .get(`/cve-id-available/${cveIdDummy5.cve_id}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(cveIdDummy5.cve_id)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is not a user of the same org or the secretariat and the cve is RESERVED', (done) => {
      chai.request(server)
        .get(`/cve-id-not-owning-org-reserved/${cveId}`)
        .set(orgHeader) // not the owning org or secretariat
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(cveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is not a user of the same org or the secretariat and the cve is not RESERVED', async () => {
      const res = await chai.request(server)
        .get(`/cve-id-not-owning-org-not-reserved/${cveId}`)
        .set(orgHeader) // not the owning cna or secretariat

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
      expect(res.body).to.have.property('state').and.to.equal('REJECT')
      expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
    })

    it('Requester is a user of the same org', async () => {
      const res = await chai.request(server)
        .get(`/cve-id-owning-org/${cveId}`)
        .set(owningOrgHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
      expect(res.body).to.have.property('state').and.to.equal('PUBLIC')
      expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
      expect(res.body).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
      expect(res.body).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
    })

    it('Requester is the secretariat', (done) => {
      chai.request(server)
        .get(`/cve-id-is-secretariat/${cveId}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })
  })

  context('Getting a filtered cve id', () => {
    it('No CVEs were found for the specified query parameters', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-none-found?state=public&cve_id_year=2010')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          done()
        })
    })

    it('The "state" query parameter is provided', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-state-provided?state=PUBLIC')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('No available CVEs are returned', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-no-available-cves-returned?state=AVAILABLE')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          done()
        })
    })

    it('The "cve_id_year" query parameter is provided', (done) => {
      chai.request(server)
        .get(`/cve-id-filtered-cve-id-year-provided?cve_id_year=${cveIdYear}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(1)
          expect(res.body.cve_ids[0]).to.have.property('cve_id').and.to.equal(cveId)
          expect(res.body.cve_ids[0]).to.have.property('cve_year').and.to.equal(cveIdYear)
          expect(res.body.cve_ids[0]).to.have.property('state').and.to.equal('PUBLIC')
          expect(res.body.cve_ids[0]).to.have.property('owning_cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.cve_ids[0]).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('The requester is not the secretariat and no query parameters are provided', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-not-secretariat-no-query')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveId }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    it('Updating the org of the user who requested the cve id', (done) => {
      chai.request(server)
        .put(`/cve-id-filtered-update-user-org-request-cve-id-1/${owningOrg.short_name}/${owningOrgUser.username}?org_shortname=${org.short_name}`)
        .set(owningOrgHeader)
        .end((err) => {
          if (err) {
            done(err)
          }

          chai.request(server)
            .get(`/cve-id-filtered-update-user-org-request-cve-id-2/${org.short_name}/${owningOrgUser.username}`)
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('username').and.to.equal(owningOrgUser.username)
              expect(res.body).to.have.property('org_UUID').and.to.equal(org.UUID)
              done()
            })
        })
    })

    it('The requested_by field did not change after updating the org of the user who requested the cve id', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-requested-field-not-changed')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cveId }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    it('The requester is the secretariat and no query parameters are provided', (done) => {
      chai.request(server)
        .get('/cve-id-filtered-secretariat-no-query')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.an('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(5)
          expect(res.body.cve_ids[0]).to.nested.include({ cve_id: cvePublic.cve_id }).and.to.nested.include({ cve_year: cveIdYear })
          expect(res.body.cve_ids[0]).to.nested.include({ state: cvePublic.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[0]).to.nested.include({ 'requested_by.cna': owningOrg.short_name }).and.to.nested.include({ 'requested_by.user': owningOrgUser.username })
          expect(res.body.cve_ids[1]).to.nested.include({ cve_id: cveIdDummy1.cve_id }).and.to.nested.include({ cve_year: cveIdDummy1.cve_year })
          expect(res.body.cve_ids[1]).to.nested.include({ state: cveIdDummy1.state }).and.to.nested.include({ owning_cna: owningOrg.short_name })
          expect(res.body.cve_ids[1]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[2]).to.nested.include({ cve_id: cveIdDummy2.cve_id }).and.to.nested.include({ cve_year: cveIdDummy2.cve_year })
          expect(res.body.cve_ids[2]).to.nested.include({ state: cveIdDummy2.state }).and.to.nested.include({ owning_cna: secretariatOrg.short_name })
          expect(res.body.cve_ids[2]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[3]).to.nested.include({ cve_id: cveIdDummy3.cve_id }).and.to.nested.include({ cve_year: cveIdDummy3.cve_year })
          expect(res.body.cve_ids[3]).to.nested.include({ state: cveIdDummy3.state }).and.to.nested.include({ owning_cna: secretariatOrg.short_name })
          expect(res.body.cve_ids[3]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          expect(res.body.cve_ids[4]).to.nested.include({ cve_id: cveIdDummy4.cve_id }).and.to.nested.include({ cve_year: cveIdDummy4.cve_year })
          expect(res.body.cve_ids[4]).to.nested.include({ state: cveIdDummy4.state }).and.to.nested.include({ owning_cna: org.short_name })
          expect(res.body.cve_ids[4]).to.nested.include({ 'requested_by.cna': secretariatOrg.short_name }).and.to.nested.include({ 'requested_by.user': secretariatUser.username })
          done()
        })
    })

    it('The secretariat gets a list of non-paginated cve ids', (done) => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 500
      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdMockObj.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = cveIdMockObj.cvePublic
          this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
          this.testRes2 = cveIdMockObj.cveDummy1
          this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2],
            itemCount: 2,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }

          return res
        }
      }

      server.route('/cve-id-filtered-non-paginated')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      chai.request(server)
        .get('/cve-id-filtered-non-paginated')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body).to.not.have.property('totalCount')
          expect(res.body).to.not.have.property('itemsPerPage')
          expect(res.body).to.not.have.property('pageCount')
          expect(res.body).to.not.have.property('currentPage')
          expect(res.body).to.not.have.property('prevPage')
          expect(res.body).to.not.have.property('nextPage')
          done()
        })
    })

    it('The secretariat gets a list of paginated cve ids with "page" query param undefined', (done) => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 3
      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdMockObj.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = cveIdMockObj.cvePublic
          this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
          this.testRes2 = cveIdMockObj.cveDummy1
          this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes3 = cveIdMockObj.cveDummy2
          this.testRes3.owning_cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes3.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes3.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes4 = cveIdMockObj.cveDummy3
          this.testRes4.owning_cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes4.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes4.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes5 = cveIdMockObj.cveDummy4
          this.testRes5.owning_cna = cveIdMockObj.org.short_name
          this.testRes5.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes5.requested_by.user = cveIdMockObj.secretariatUser.username
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes1, this.testRes2, this.testRes3],
            itemCount: 5,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: true,
            prevPage: null,
            nextPage: 2
          }
          return res
        }
      }

      server.route('/cve-id-filtered-paginated')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      chai.request(server)
        .get('/cve-id-filtered-paginated')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(3)
          expect(res.body).to.have.property('totalCount').and.to.equal(5)
          expect(res.body).to.have.property('itemsPerPage').and.to.equal(CONSTANTS.PAGINATOR_OPTIONS.limit)
          expect(res.body).to.have.property('pageCount').and.to.equal(2)
          expect(res.body).to.have.property('currentPage').and.to.equal(1)
          expect(res.body).to.have.property('prevPage').and.to.equal(null)
          expect(res.body).to.have.property('nextPage').and.to.equal(2)
          done()
        })
    })

    it('The secretariat gets a list of paginated cve ids with "page" query param defined', (done) => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 3
      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdMockObj.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class MyCveIdRepo {
        constructor () {
          this.testRes1 = cveIdMockObj.cvePublic
          this.testRes1.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.cna = cveIdMockObj.owningOrg.short_name
          this.testRes1.requested_by.user = cveIdMockObj.owningOrgUser.username
          this.testRes2 = cveIdMockObj.cveDummy1
          this.testRes2.owning_cna = cveIdMockObj.owningOrg.short_name
          this.testRes2.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes2.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes3 = cveIdMockObj.cveDummy2
          this.testRes3.owning_cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes3.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes3.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes4 = cveIdMockObj.cveDummy3
          this.testRes4.owning_cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes4.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes4.requested_by.user = cveIdMockObj.secretariatUser.username
          this.testRes5 = cveIdMockObj.cveDummy4
          this.testRes5.owning_cna = cveIdMockObj.org.short_name
          this.testRes5.requested_by.cna = cveIdMockObj.secretariatOrg.short_name
          this.testRes5.requested_by.user = cveIdMockObj.secretariatUser.username
        }

        async aggregatePaginate () {
          const res = {
            itemsList: [this.testRes4, this.testRes3],
            itemCount: 5,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 2,
            pageCount: 2,
            pagingCounter: 1,
            hasPrevPage: true,
            hasNextPage: false,
            prevPage: 1,
            nextPage: null
          }
          return res
        }
      }

      server.route('/cve-id-filtered-paginated-2')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      chai.request(server)
        .get('/cve-id-filtered-paginated-2?page=2')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(2)
          expect(res.body).to.have.property('totalCount').and.to.equal(5)
          expect(res.body).to.have.property('itemsPerPage').and.to.equal(CONSTANTS.PAGINATOR_OPTIONS.limit)
          expect(res.body).to.have.property('pageCount').and.to.equal(2)
          expect(res.body).to.have.property('currentPage').and.to.equal(2)
          expect(res.body).to.have.property('prevPage').and.to.equal(1)
          expect(res.body).to.have.property('nextPage').and.to.equal(null)
          done()
        })
    })

    it('The secretariat gets an empty list of cve ids because there are no cve ids in the database', (done) => {
      CONSTANTS.PAGINATOR_OPTIONS.limit = 500
      class MyOrgRepo {
        async getOrgUUID () {
          return cveIdMockObj.secretariatOrg.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class MyCveIdRepo {
        async aggregatePaginate () {
          const res = {
            itemsList: [],
            itemCount: 0,
            itemsPerPage: CONSTANTS.PAGINATOR_OPTIONS.limit,
            currentPage: 1,
            pageCount: 1,
            pagingCounter: 1,
            hasPrevPage: false,
            hasNextPage: false,
            prevPage: null,
            nextPage: null
          }
          return res
        }
      }

      server.route('/cve-id-filtered-empty')
        .get((req, res, next) => {
          const factory = {
            getCveIdRepository: () => { return new MyCveIdRepo() },
            getOrgRepository: () => { return new MyOrgRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, cveIdParams.parseGetParams, cveIdController.CVEID_GET_FILTER)

      const testSecretariatHeader = Object.assign({}, secretariatHeader)
      chai.request(server)
        .get('/cve-id-filtered-empty')
        .set(testSecretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('cve_ids').and.to.be.a('array').and.to.have.lengthOf(0)
          expect(res.body).to.not.have.property('totalCount')
          expect(res.body).to.not.have.property('itemsPerPage')
          expect(res.body).to.not.have.property('pageCount')
          expect(res.body).to.not.have.property('currentPage')
          expect(res.body).to.not.have.property('prevPage')
          expect(res.body).to.not.have.property('nextPage')
          done()
        })
    })
  })

  context('Modifying a cve id', () => {
    it('CVE ID does not exist', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-secretariat-cve-id-doesnt-exist/${nonExistentCveId}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdNotFound(nonExistentCveId)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org query parameter is provided but new org does not exist', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-org-doesnt-exist/${cveId}?org=${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDne(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('State query parameter is provided but state is RESERVED', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-state-query-is-reserved/${cveId}?state=RESERVED`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidReservedState()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('State query parameter is invalid', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-state-query-is-invalid/${cveId}?state=PUBLISHED`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.invalidState('PUBLISHED')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Cve is reassigned to another org and state is modified', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-org-and-state-modified/${cveId}?state=REJECT&org=${org.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('state').and.to.equal('REJECT')
          expect(res.body.updated).to.have.property('owning_cna').and.to.equal(org.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })

    it('No query parameters are provided', (done) => {
      chai.request(server)
        .put(`/cve-id-modify-no-query/${cveId}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(cveId + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('state').and.to.equal('REJECT')
          expect(res.body.updated).to.have.property('owning_cna').and.to.equal(org.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.cna').and.to.equal(owningOrg.short_name)
          expect(res.body.updated).to.have.nested.property('requested_by.user').and.to.equal(owningOrgUser.username)
          done()
        })
    })
  })
})
