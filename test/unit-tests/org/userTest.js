const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

const userA = require('./mockObjects.org').userA
const userB = require('./mockObjects.org').userB
const userC = require('./mockObjects.org').userC
const userAHeader = require('./mockObjects.org').userAHeader
const userDHeader = require('./mockObjects.org').userDHeader
const secretariatHeader = require('./mockObjects.org').secretariatHeader
const owningOrgHeader = require('./mockObjects.org').owningOrgHeader
const orgHeader = require('./mockObjects.org').orgHeader
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const existentOrg = require('./mockObjects.org').existentOrg
const owningOrg = require('./mockObjects.org').owningOrg
const existentUserDummy = require('./mockObjects.org').existentUserDummy
const existentOrgDummy = require('./mockObjects.org').existentOrgDummy
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg

const orgController = require('../../../src/controller/org.controller/org.controller')
const orgParams = require('../../../src/controller/org.controller/org.middleware')
const errors = require('../../../src/controller/org.controller/error')
const CONSTANTS = require('../../../src/constants')
const error = new errors.OrgControllerError()
const testRepo = require('../../../test-utils/repositories')
const { userD } = require('./mockObjects.org')

describe('Test user functions in Org Controller', () => {
  context('Creating a user', () => {
    it('User is not created because org does not exist', (done) => {
      chai.request(server)
        .post(`/user-not-created-org-does-not-exist/${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .send(nonExistentUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Param org\'s UUID does not match the provided org\'s UUID', (done) => {
      const testUser = Object.assign({}, existentUser)
      testUser.org_UUID = owningOrg.UUID

      chai.request(server)
        .post(`/user-not-created-org-does-not-match/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.shortnameMismatch(existentOrg.short_name, owningOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is created when org UUID is undefined', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      delete testUser.org_UUID

      chai.request(server)
        .post(`/user-created-org-undefined/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrg.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          done()
        })
    })

    it('User is created when org UUID is null', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      testUser.org_UUID = null

      chai.request(server)
        .post(`/user-created-org-null/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrg.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          done()
        })
    })

    it('User is created when user UUID is undefined', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      delete testUser.UUID

      chai.request(server)
        .post(`/user-created-uuid-undefined/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
          done()
        })
    })

    it('User is created when UUID is null', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      testUser.UUID = null

      chai.request(server)
        .post(`/user-created-uuid-null/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(testUser.org_UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
          done()
        })
    })

    it('User is created when UUID is defined', (done) => {
      chai.request(server)
        .post(`/user-created-uuid-defined/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(nonExistentUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(nonExistentUser.org_UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(nonExistentUser.username)
          expect(res.body.created).to.have.property('UUID').and.to.equal(nonExistentUser.UUID)
          done()
        })
    })

    it('User is not created because it already exists', (done) => {
      chai.request(server)
        .post(`/user-not-created-already-exists/${existentOrg.short_name}`)
        .set(secretariatHeader)
        .send(existentUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.userExists(existentUser.username)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not created because the requester is not an Admin user from the same org and is not the secretariat', done => {
      const testUser = Object.assign({}, userA)
      testUser.authority = {
        active_roles: ['ADMIN']
      }

      chai.request(server)
        .post(`/user-not-created-not-secretariat-not-same-org-admin/${existentOrgDummy.short_name}`)
        .set(owningOrgHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notOrgAdminOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Requester is secretariat and not Admin: User is created with the "ADMIN" role', done => {
      const testUser = Object.assign({}, userA)
      testUser.authority = {
        active_roles: ['ADMIN']
      }

      chai.request(server)
        .post(`/user-created-secretariat-not-admin/${existentOrgDummy.short_name}`)
        .set(secretariatHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrgDummy.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          expect(res.body.created).to.have.nested.property('authority.active_roles').and.to.have.lengthOf(1)
          expect(res.body.created.authority.active_roles[0]).to.equal(testUser.authority.active_roles[0])
          done()
        })
    })

    it('Requester is Admin and is not secretariat: User is created with the "ADMIN" role', done => {
      userA.authority.active_roles = ['ADMIN']
      const testUser = Object.assign({}, userC)
      testUser.authority = {
        active_roles: ['ADMIN']
      }

      chai.request(server)
        .post(`/user-created-not-secretariat-same-org-admin/${existentOrgDummy.short_name}`)
        .set(userAHeader)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrgDummy.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(testUser.username)
          expect(res.body.created).to.have.nested.property('authority.active_roles').and.to.have.lengthOf(1)
          expect(res.body.created.authority.active_roles[0]).to.equal(testUser.authority.active_roles[0])
          userA.authority.active_roles = []
          done()
        })
    })

    it('Requester is secretariat and Admin: User is created without a user role', done => {
      existentUser.authority.active_roles = ['ADMIN']

      chai.request(server)
        .post(`/user-created-secretariat-same-org-admin/${existentOrgDummy.short_name}`)
        .set(secretariatHeader)
        .send(userA)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(userA.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('org_UUID').and.to.equal(existentOrgDummy.UUID)
          expect(res.body.created).to.have.property('username').and.to.equal(userA.username)
          expect(res.body.created).to.have.nested.property('authority.active_roles').and.to.have.lengthOf(0)
          existentUser.authority.active_roles = []
          done()
        })
    })
  })

  context('Updating a user', () => {
    it('User is not updated because org does not exist', (done) => {
      const shortname = nonExistentOrg.short_name.replace(/\s/g, '')
      const username = existentUser.username.replace(/\s/g, '')
      chai.request(server)
        .put(`/user-not-updated-org-doesnt-exist/${shortname}/${username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not updated because user does not exist', (done) => {
      const shortname = existentOrg.short_name.replace(/\s/g, '')
      const username = nonExistentUser.username.replace(/\s/g, '')
      chai.request(server)
        .put(`/user-not-updated-doesnt-exist/${shortname}/${username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.userDne(nonExistentUser.username)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not updated because the new shortname does not exist', (done) => {
      chai.request(server)
        .put(`/user-not-updated-user-doesnt-exist/${existentOrg.short_name}/${existentUser.username}?org_shortname=${nonExistentOrg.short_name}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDne(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not updated because requestor is not Org Admin, Secretariat, or user', (done) => {
      class Org {
        async getOrgUUID () {
          return existentOrg.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return existentUser
        }

        async isAdmin () {
          return false
        }
      }

      server.route('/user-not-updated-requestor-not-admin-secretariat-user/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      chai.request(server)
        .put(`/user-not-updated-requestor-not-admin-secretariat-user/${existentOrg.short_name}/${existentUser.username}?org_shortname=${existentOrg.short_name}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not updated because requestor is Org Admin of different organization', (done) => {
      class Org {
        async getOrgUUID () {
          return existentOrg.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return existentUser
        }

        async isAdmin (username, shortname) {
          expect(username).to.equal(userDHeader['CVE-API-USER'])
          expect(shortname).to.equal(existentOrgDummy.short_name)
          return true
        }
      }

      server.route('/user-not-updated-requestor-different-admin/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      chai.request(server)
        .put(`/user-not-updated-requestor-different-admin/${existentOrg.short_name}/${existentUser.username}?org_shortname=${existentOrg.short_name}`)
        .set(userDHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is not updated because user can\'t update their own active field', (done) => {
      class Org {
        async getOrgUUID () {
          return existentOrgDummy.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userA
        }

        async isAdmin (username, shortname) {
          expect(username).to.equal(userAHeader['CVE-API-USER'])
          expect(shortname).to.equal(existentOrgDummy.short_name)
          return false
        }
      }

      server.route('/user-not-updated-cant-update-active-field/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      chai.request(server)
        .put(`/user-not-updated-cant-update-active-field/${existentOrgDummy.short_name}/${userA.username}?active=true`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notOrgAdminOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User is updated: Adding a user role', (done) => {
      const userTestRepo = new testRepo.UserUpdatedAddingRole()
      const testUser = Object.assign({}, existentUserDummy)
      testUser.authority = {
        active_roles: [CONSTANTS.USER_ROLE_ENUM.ADMIN]
      }

      chai.request(server)
        .put(`/user-updated-adding-role-1/${owningOrg.short_name}/${testUser.username}?active_roles.add=${CONSTANTS.USER_ROLE_ENUM.ADMIN}&active_roles.add=${CONSTANTS.USER_ROLE_ENUM.ADMIN}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const user = userTestRepo.getUser()
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(1)
          expect(res.body.updated.authority.active_roles[0]).to.equal(CONSTANTS.USER_ROLE_ENUM.ADMIN)
          expect(user.authority.active_roles).to.have.lengthOf(1)
          expect(user.authority.active_roles[0]).to.equal(testUser.authority.active_roles[0])
          expect(user.org_UUID).to.equal(testUser.org_UUID)
          expect(user.username).to.equal(testUser.username)
          expect(user.UUID).to.equal(testUser.UUID)
          expect(user.secret).to.equal(testUser.secret)
          expect(user.active).to.equal(testUser.active)
          expect(user.name.first).to.equal(testUser.name.first)
          expect(user.name.last).to.equal(testUser.name.last)
          expect(user.name.middle).to.equal(testUser.name.middle)
          expect(user.name.suffix).to.equal(testUser.name.suffix)
          expect(user.name.surname).to.equal(testUser.name.surname)
          done()
        })
    })

    it('User is unchanged: Adding a user role that the user already have', (done) => {
      const userTestRepo = new testRepo.UserUpdatedAddingRoleAlreadyExists()
      const testUser = Object.assign({}, existentUserDummy)
      testUser.authority = {
        active_roles: [CONSTANTS.USER_ROLE_ENUM.ADMIN]
      }

      chai.request(server)
        .put(`/user-updated-adding-role-2/${owningOrg.short_name}/${testUser.username}?active_roles.add=${CONSTANTS.USER_ROLE_ENUM.ADMIN}&active_roles.add=${CONSTANTS.USER_ROLE_ENUM.ADMIN}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const user = userTestRepo.getUser()
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(1)
          expect(res.body.updated.authority.active_roles[0]).to.equal(CONSTANTS.USER_ROLE_ENUM.ADMIN)
          expect(user.authority.active_roles).to.have.lengthOf(1)
          expect(user.authority.active_roles[0]).to.equal(testUser.authority.active_roles[0])
          expect(user.org_UUID).to.equal(testUser.org_UUID)
          expect(user.username).to.equal(testUser.username)
          expect(user.UUID).to.equal(testUser.UUID)
          expect(user.secret).to.equal(testUser.secret)
          expect(user.active).to.equal(testUser.active)
          expect(user.name.first).to.equal(testUser.name.first)
          expect(user.name.last).to.equal(testUser.name.last)
          expect(user.name.middle).to.equal(testUser.name.middle)
          expect(user.name.suffix).to.equal(testUser.name.suffix)
          expect(user.name.surname).to.equal(testUser.name.surname)
          done()
        })
    })

    it('User is updated: Removing a user role', (done) => {
      const userTestRepo = new testRepo.UserUpdatedRemovingRole()
      const testUser = Object.assign({}, existentUserDummy)
      testUser.authority = {
        active_roles: [CONSTANTS.USER_ROLE_ENUM.ADMIN]
      }

      chai.request(server)
        .put(`/user-updated-removing-role-1/${owningOrg.short_name}/${testUser.username}?active_roles.remove=${CONSTANTS.USER_ROLE_ENUM.ADMIN}&active_roles.remove=${CONSTANTS.USER_ROLE_ENUM.ADMIN}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const user = userTestRepo.getUser()
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(0)
          expect(user.authority.active_roles).to.have.lengthOf(0)
          expect(user.org_UUID).to.equal(testUser.org_UUID)
          expect(user.username).to.equal(testUser.username)
          expect(user.UUID).to.equal(testUser.UUID)
          expect(user.secret).to.equal(testUser.secret)
          expect(user.active).to.equal(testUser.active)
          expect(user.name.first).to.equal(testUser.name.first)
          expect(user.name.last).to.equal(testUser.name.last)
          expect(user.name.middle).to.equal(testUser.name.middle)
          expect(user.name.suffix).to.equal(testUser.name.suffix)
          expect(user.name.surname).to.equal(testUser.name.surname)
          done()
        })
    })

    it('User is unchanged: Removing a user role that the user does not have', (done) => {
      const userTestRepo = new testRepo.UserUpdatedRemovingRoleAlreadyRemoved()
      chai.request(server)
        .put(`/user-updated-removing-role-2/${owningOrg.short_name}/${existentUserDummy.username}?active_roles.remove=${CONSTANTS.USER_ROLE_ENUM.ADMIN}&active_roles.remove=${CONSTANTS.USER_ROLE_ENUM.ADMIN}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          const user = userTestRepo.getUser()
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.authority.active_roles).to.have.lengthOf(0)
          expect(user.authority.active_roles).to.have.lengthOf(0)
          expect(user.org_UUID).to.equal(existentUserDummy.org_UUID)
          expect(user.username).to.equal(existentUserDummy.username)
          expect(user.UUID).to.equal(existentUserDummy.UUID)
          expect(user.secret).to.equal(existentUserDummy.secret)
          expect(user.active).to.equal(existentUserDummy.active)
          expect(user.name.first).to.equal(existentUserDummy.name.first)
          expect(user.name.last).to.equal(existentUserDummy.name.last)
          expect(user.name.middle).to.equal(existentUserDummy.name.middle)
          expect(user.name.suffix).to.equal(existentUserDummy.name.suffix)
          expect(user.name.surname).to.equal(existentUserDummy.name.surname)
          done()
        })
    })

    it('User is updated: Deactivating User as Admin', (done) => {
      class Org {
        async getOrgUUID () {
          return existentOrgDummy.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userA
        }

        async isAdmin (username, shortname) {
          expect(username).to.equal(userDHeader['CVE-API-USER'])
          expect(shortname).to.equal(existentOrgDummy.short_name)
          return true
        }

        async updateByUserNameAndOrgUUID () {
          return { n: 1 }
        }

        async getUserUUID () {
          return userD.UUID
        }
      }

      server.route('/user-updated-requestor-admin-deactivate-user/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      chai.request(server)
        .put(`/user-updated-requestor-admin-deactivate-user/${existentOrgDummy.short_name}/${userA.username}?active=false`)
        .set(userDHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.active).to.equal(false)
          done()
        })
    })

    it('User is updated: Username changed as user', (done) => {
      class Org {
        async getOrgUUID () {
          return existentOrgDummy.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userA
        }

        async isAdmin (username, shortname) {
          expect(username).to.equal(userAHeader['CVE-API-USER'])
          expect(shortname).to.equal(existentOrgDummy.short_name)
          return false
        }

        async updateByUserNameAndOrgUUID () {
          return { n: 1 }
        }

        async getUserUUID () {
          return userA.UUID
        }

        async find () {
          return []
        }
      }

      server.route('/user-updated-requestor-user-username-changed/:shortname/:username')
        .put((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parsePostParams, orgController.USER_UPDATE_SINGLE)

      chai.request(server)
        .put(`/user-updated-requestor-user-username-changed/${existentOrgDummy.short_name}/${userA.username}?new_username=TESTER`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated.username).to.equal('TESTER')
          done()
        })
    })

    it('User is unchanged: No query parameters are provided', async () => {
      const result = existentUser

      const res = await chai.request(server)
        .put(`/user-not-updated-no-parameters/${existentOrg.short_name}/${existentUser.username}`)
        .set(secretariatHeader)

      expect(res).to.have.status(200)
      expect(res).to.have.property('body').and.to.be.a('object')
      expect(res.body).to.have.property('updated').and.to.be.a('object')
      expect(res.body.updated.authority.active_roles[0]).to.equal(existentUser.authority.active_roles[0])
      expect(result.org_UUID).to.equal(existentUser.org_UUID)
      expect(result.username).to.equal(existentUser.username)
      expect(result.UUID).to.equal(existentUser.UUID)
      expect(result.secret).to.equal(existentUser.secret)
      expect(result.active).to.equal(existentUser.active)
      expect(result.name.first).to.equal(existentUser.name.first)
      expect(result.name.last).to.equal(existentUser.name.last)
      expect(result.name.middle).to.equal(existentUser.name.middle)
      expect(result.name.suffix).to.equal(existentUser.name.suffix)
      expect(result.name.surname).to.equal(existentUser.name.surname)
    })
  })

  context('Resetting a user\'s secret', () => {
    it('User secret is not reset because org does not exists', (done) => {
      chai.request(server)
        .put(`/user-secret-not-reset-org-doesnt-exist/${nonExistentOrg.short_name}/${existentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User secret is not reset because user does not exists', (done) => {
      chai.request(server)
        .put(`/user-secret-not-reset-user-doesnt-exist/${existentOrg.short_name}/${nonExistentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.userDne(nonExistentUser.username)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    // requester is not the same user (same org but different username)
    it('Requester is from same org but has different username: User secret is not reset because requester is not the same user or is the secretariat or org admin', (done) => {
      chai.request(server)
        .put(`/user-secret-reset-sameOrg/${existentOrgDummy.short_name}/${userC.username}`) // requester has same org as user but different username
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    // requester is not the same user (same username but different org)
    it('Requester has same username but is from different org: User secret is not reset because requester is not the same user or is the secretariat or org admin', (done) => {
      chai.request(server)
        .put(`/user-secret-reset-sameUsername/${owningOrg.short_name}/${userB.username}`) // requester has same username as user but different org
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    // requester is admin but does not belong to the same user's org
    it('Secret is not reset because requester is org admin but does not belong to the same org', (done) => {
      chai.request(server)
        .put(`/user-secret-not-reset-userIsOrgAdminForDifferentOrg/${owningOrg.short_name}/${userB.username}`)
        .set(userDHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    // requester is not a secretariat or an admin
    it('Secret is not reset because requester is not the user, a secretariat or an admin', (done) => {
      chai.request(server)
        .put(`/user-secret-not-reset-userIsNotUserAdminOrSecretariat/${existentOrgDummy.short_name}/${userC.username}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Secret is reset because requester is the user', (done) => {
      chai.request(server)
        .put(`/user-secret-reset-notSameOrgOrSecretariat/${existentOrgDummy.short_name}/${userA.username}`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('API-secret').and.to.be.a('string')
          done()
        })
    })

    it('Secret is reset because requester is a secretariat', (done) => {
      chai.request(server)
        .put(`/user-secret-reset-secretariat/${existentOrg.short_name}/${existentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('API-secret').and.to.be.a('string')
          done()
        })
    })

    it('Secret is reset because requester is an admin that belongs to the same org', (done) => {
      userA.authority.active_roles = [CONSTANTS.USER_ROLE_ENUM.ADMIN]

      chai.request(server)
        .put(`/user-secret-reset-userIsOrgAdmin/${existentOrgDummy.short_name}/${userC.username}`)
        .set(userAHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('API-secret').and.to.be.a('string')
          userA.authority.active_roles = []
          done()
        })
    })
  })

  context('Getting a user', () => {
    it('Org does not exists', (done) => {
      chai.request(server)
        .get(`/user-get-user-org-doesnt-exist/${nonExistentOrg.short_name}/${existentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User does not exists', (done) => {
      chai.request(server)
        .get(`/user-get-user-user-doesnt-exist/${existentOrg.short_name}/${nonExistentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.userDne(nonExistentUser.username)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User exists and the requester is the secretariat', (done) => {
      chai.request(server)
        .get(`/user-get-user/${existentOrg.short_name}/${existentUser.username}`)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('username').and.to.equal(existentUser.username)
          expect(res.body).to.have.property('org_UUID').and.to.equal(existentUser.org_UUID)
          done()
        })
    })

    it('User exists and the requester belongs to the user\'s org', (done) => {
      chai.request(server)
        .get(`/user-get-user/${owningOrg.short_name}/${existentUserDummy.username}`)
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('username').and.to.equal(existentUserDummy.username)
          expect(res.body).to.have.property('org_UUID').and.to.equal(existentUserDummy.org_UUID)
          done()
        })
    })

    it('User exists and the requester is not secretariat and does not belong to the user\'s org', (done) => {
      chai.request(server)
        .get(`/user-get-user/${owningOrg.short_name}/${existentUserDummy.username}`)
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameOrgOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })
})
