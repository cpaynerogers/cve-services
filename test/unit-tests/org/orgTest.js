const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const secretariatHeader = require('./mockObjects.org').secretariatHeader
const owningOrgHeader = require('./mockObjects.org').owningOrgHeader
const orgHeader = require('./mockObjects.org').orgHeader
const owningOrg = require('./mockObjects.org').owningOrg
const existentOrg = require('./mockObjects.org').existentOrg
const existentOrgDummy = require('./mockObjects.org').existentOrgDummy
const nonExistentOrg = require('./mockObjects.org').nonExistentOrg
const orgWithZeroIdQuota = require('./mockObjects.org').orgWithZeroIdQuota
const orgWithNegativeIdQuota = require('./mockObjects.org').orgWithNegativeIdQuota
const orgExceedingMaxIdQuota = require('./mockObjects.org').orgExceedingMaxIdQuota
const toBeDeactivatedOrg = require('./mockObjects.org').toBeDeactivatedOrg
const toBeActivatedOrg = require('./mockObjects.org').toBeActivatedOrg
const existentUser = require('./mockObjects.org').existentUser
const nonExistentUser = require('./mockObjects.org').nonExistentUser
const User = require('../../../src/model/user')
const Org = require('../../../src/model/org')
const CONSTANTS = require('../../../src/constants')
const errors = require('../../../src/controller/org.controller/error')
const error = new errors.OrgControllerError()
const repos = require('../../../test-utils/repositories')

describe('Test Org Controller', () => {
  before(async () => {
    await User.findOneAndRemove()
      .byUUID(nonExistentUser.UUID)

    await Org.findOneAndRemove()
      .byUUID(nonExistentOrg.UUID)

    await User.findOneAndUpdate()
      .byUUID(existentUser.UUID)
      .updateOne(existentUser)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(existentOrgDummy.UUID)
      .updateOne(existentOrgDummy)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(owningOrg.UUID)
      .updateOne(owningOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(orgWithZeroIdQuota.UUID)
      .updateOne({}, orgWithZeroIdQuota, { runValidators: true })
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(orgWithNegativeIdQuota.UUID)
      .updateOne(orgWithNegativeIdQuota)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(orgExceedingMaxIdQuota.UUID)
      .updateOne(orgExceedingMaxIdQuota)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(toBeDeactivatedOrg.UUID)
      .updateOne(toBeDeactivatedOrg)
      .setOptions({ upsert: true })

    await Org.findOneAndUpdate()
      .byUUID(toBeActivatedOrg.UUID)
      .updateOne(toBeActivatedOrg)
      .setOptions({ upsert: true })
  })

  context('Creating an org', () => {
    it('Org is created when UUID is undefined', (done) => {
      const testOrg = Object.assign({}, existentOrg)
      delete testOrg.UUID

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
          done()
        })
    })

    it('Org is created when UUID is null', (done) => {
      Org.findOneAndRemove()
        .byShortName(existentOrg.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testOrg = Object.assign({}, existentOrg)
          testOrg.UUID = null

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna')
            .set(secretariatHeader)
            .send(existentOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
              expect(res.body.created).to.have.property('UUID').and.to.be.a('string')
              done()
            })
        })
    })

    it('Org is created when UUID is defined', (done) => {
      Org.findOneAndRemove()
        .byShortName(existentOrg.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna')
            .set(secretariatHeader)
            .send(existentOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
              expect(res.body.created).to.have.property('UUID').to.equal(existentOrg.UUID)
              done()
            })
        })
    })

    it('Org is Secretariat and is created when roles are defined', (done) => {
      Org.findOneAndRemove()
        .byUUID(existentOrg.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna')
            .set(secretariatHeader)
            .send(existentOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(existentOrg.short_name + ' CNA was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('short_name').to.equal(existentOrg.short_name)
              expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(existentOrg.policies.id_quota)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA).and.to.include(CONSTANTS.AUTH_ROLE_ENUM.SECRETARIAT)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(2)
              done()
            })
        })
    })

    it('Org is not Secretariat and is created when roles are undefined and id_quota is defined', (done) => {
      const testOrg = Object.assign({}, nonExistentOrg)
      delete testOrg.authority.active_roles

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
          expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(testOrg.policies.id_quota)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
          expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
          done()
        })
    })

    it('Org is created when id_quota is undefined', (done) => {
      Org.findOneAndRemove()
        .byUUID(nonExistentOrg.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testOrg = Object.assign({}, nonExistentOrg)
          delete testOrg.policies.id_quota

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna')
            .set(secretariatHeader)
            .send(testOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(testOrg.short_name + ' CNA was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
              expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
              done()
            })
        })
    })

    it('Org is created when id_quota is null', (done) => {
      Org.findOneAndRemove()
        .byUUID(nonExistentOrg.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          const testOrg = Object.assign({}, nonExistentOrg)
          testOrg.policies.id_quota = null

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna')
            .set(secretariatHeader)
            .send(testOrg)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(testOrg.short_name + ' CNA was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('short_name').to.equal(testOrg.short_name)
              expect(res.body.created).to.have.nested.property('policies.id_quota').to.equal(CONSTANTS.DEFAULT_ID_QUOTA)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.include(CONSTANTS.AUTH_ROLE_ENUM.CNA)
              expect(res.body.created).to.have.nested.property('authority.active_roles').to.have.lengthOf(1)
              done()
            })
        })
    })

    it('Org is not created because it already exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna')
        .set(secretariatHeader)
        .send(existentOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaExists(existentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Updating an org', () => {
    it('Org is not updated because it does not exists', (done) => {
      Org.findOneAndRemove()
        .byUUID(nonExistentOrg.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + nonExistentOrg.short_name)
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              const errObj = error.cnaDneParam(nonExistentOrg.short_name)
              expect(res.body.error).to.equal(errObj.error)
              expect(res.body.message).to.equal(errObj.message)
              done()
            })
        })
    })

    it('Org is not updated because CNA shortname already exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + existentOrg.short_name + '?shortname=cisco')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.duplicateShortname('cisco')
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota is undefined', (done) => {
      const testOrg = Object.assign({}, existentOrg)
      delete testOrg.policies.id_quota

      // perform the request to the api
      chai.request(server)
        .post('/api/test/cna/' + testOrg.short_name)
        .set(secretariatHeader)
        .send(testOrg)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testOrg.short_name + ' CNA was successfully updated.')
          expect(res.body.updated).to.have.nested.property('policies.id_quota').to.equal(1000)
          existentOrg.policies.id_quota = 1000
          done()
        })
    })

    // check that the org is unchanged
    it('No query parameters are provided', (done) => {
      Org.findOne()
        .byUUID(existentOrg.UUID)
        .exec((err, result) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .post('/api/test/cna/' + existentOrg.short_name)
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('updated').and.to.be.a('object')
              expect(res.body.updated.authority.active_roles[0]).to.equal(existentOrg.authority.active_roles[0])
              expect(res.body.updated.authority.active_roles[1]).to.equal(existentOrg.authority.active_roles[1])
              expect(res.body.updated.authority.active_roles).to.have.lengthOf(2)
              expect(res.body.updated.policies.id_quota).to.equal(existentOrg.policies.id_quota)
              expect(res.body.updated.policies.id_quota).to.equal(existentOrg.policies.id_quota)
              expect(result).to.have.property('name').to.equal(existentOrg.name)
              expect(result).to.have.property('short_name').to.equal(existentOrg.short_name)
              expect(result).to.have.property('UUID').to.equal(existentOrg.UUID)
              done()
            })
        })
    })
  })

  context('Getting an org', () => {
    it('Org does not exists', (done) => {
      Org.findOneAndRemove()
        .byUUID(nonExistentOrg.UUID)
        .exec((err) => {
          if (err) {
            done(err)
          }

          // perform the request to the api
          chai.request(server)
            .get('/api/test/cna/' + nonExistentOrg.short_name)
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              // assert expected response
              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              const errObj = error.cnaDneParam(nonExistentOrg.short_name)
              expect(res.body.error).to.equal(errObj.error)
              expect(res.body.message).to.equal(errObj.message)
              done()
            })
        })
    })

    it('Org exists', (done) => {
      // perform the request to the api
      chai.request(server)
        .get('/api/test/cna/' + existentOrg.short_name)
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('short_name').and.to.equal(existentOrg.short_name)
          done()
        })
    })
  })

  context('Getting an org\'s ID quota', () => {
    it('Org with a negative id_quota was not saved', (done) => {
      const org = new Org(orgWithNegativeIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min_message)
        done()
      })
    })

    it('Org with an id_quota greater than the max was not saved', (done) => {
      const org = new Org(orgExceedingMaxIdQuota)

      org.validate((err) => {
        expect(err.errors['policies.id_quota'].message).to.equal(CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max_message)
        done()
      })
    })

    it('Requestor is secretariat', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + existentOrg.short_name + '/id_quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(1000)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(1000)
          done()
        })
    })

    it('Requestor is owning org', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + owningOrg.short_name + '/id_quota')
        .set(owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body.id_quota).to.equal(5)
          expect(res.body.total_reserved).to.equal(0)
          expect(res.body.available).to.equal(5)
          done()
        })
    })

    it('Requestor is not secretariat or owning org', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + owningOrg.short_name + '/id_quota')
        .set(orgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notOwnerOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org does not exist', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + nonExistentOrg.short_name + '/id_quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cnaDneParam(nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('Org id_quota exceeds min quota limit', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + orgWithNegativeIdQuota.short_name + '/id_quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(-1)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(-1)
          done()
        })
    })

    it('Org id_quota exceeds max quota limit', (done) => {
      chai.request(server)
        // perform the request to the api
        .get('/api/test/cna/' + orgExceedingMaxIdQuota.short_name + '/id_quota')
        .set(secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          // assert expected response
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('id_quota').to.equal(100500)
          expect(res.body).to.have.property('total_reserved').to.equal(0)
          expect(res.body).to.have.property('available').to.equal(100500)
          done()
        })
    })
  })

  context('Getting all orgs', () => {
    it('Orgs exists', (done) => {
      Org.countDocuments({})
        .exec((err, count) => {
          if (err) {
            done(err)
          }
          repo = new repos()
          count = repo.countCnas()

          // perform the request to the api
          chai.request(server)
            .get('/api/test/cna_all')
            .set(secretariatHeader)
            .end((err, res) => {
              if (err) {
                done(err)
              }
              console.log(res)

              // assert expected response
              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('array')
              expect(res.body).to.have.lengthOf(count)
              done()
            })
        })
    })

    it('Orgs do not exists', (done) => {
      Org.deleteMany({}, (err) => {
        if (err) {
          done(err)
        }

        // perform the request to the api
        chai.request(server)
          .get('/api/test/cna')
          .set(secretariatHeader)
          .end((err, res) => {
            if (err) {
              done(err)
            }

            // assert expected response
            expect(res).to.have.status(200)
            expect(res).to.have.property('body').and.to.be.a('array')
            expect(res.body).to.have.lengthOf(0)
            done()
          })
      })
    })
  })

  after(async () => {
    await User.deleteMany({})
    await Org.deleteMany({})
  })
})
