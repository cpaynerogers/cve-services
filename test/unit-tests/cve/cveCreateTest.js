const server = require('../../../test-utils/index')
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

const cveFixtures = require('./mockObjects.cve')
const cveController = require('../../../src/controller/cve.controller/cve.controller')
const cveParams = require('../../../src/controller/cve.controller/cve.middleware')
const CONSTANTS = require('../../../src/constants')
const nonExistentCveId = 'CVE-2020-1425'
const cveIdPublic4 = 'CVE-2017-5832'
const cveIdReserved4 = 'CVE-2017-5833'
const cveIdAvailable4 = 'CVE-2017-5834'
const cveIdReject4 = 'CVE-2017-5835'
const cvePublicPass4 = require('../../schemas/4.0/' + cveIdPublic4 + '_public.json')
const cveReservedPass4 = require('../../schemas/4.0/' + cveIdReserved4 + '_reserved.json')
const cveRejectPass4 = require('../../schemas/4.0/' + cveIdReject4 + '_reject.json')

const errors = require('../../../src/controller/cve.controller/error')
const error = new errors.CveControllerError()

class MyOrg {
  async getOrgUUID () {
    return null
  }
}

class MyUser {
  async getUserUUID () {
    return null
  }
}

class MyCveIdNegativeTests {
  async findOneByCveId (id) {
    if (id === cveIdAvailable4) {
      return cveFixtures.cveAvailable4
    } else if (id === cveIdPublic4) {
      return cveFixtures.cvePublic4
    }

    return null
  }

  async updateByCveId () {
    return null
  }
}

class MyCveNegativeTests {
  async findOneByCveId (id) {
    if (id === cveIdPublic4) {
      return cvePublicPass4
    }

    return null
  }

  async updateByCveId () {
    return null
  }
}

class MyCveIdPositiveTests {
  constructor () {
    this.publicDoc = cveFixtures.cvePublic4
    this.rejectDoc = cveFixtures.cveReject4
  }

  getCveIdPublic () {
    return this.publicDoc
  }

  getCveIdReject () {
    return this.rejectDoc
  }

  async findOneByCveId (id) {
    if (id === cveIdPublic4) {
      return cveFixtures.cvePublic4
    }

    return cveFixtures.cveReject4
  }

  async updateByCveId (id, cveId) {
    if (id === cveIdPublic4) {
      this.publicDoc.state = cveId.state
    } else {
      this.rejectDoc.state = cveId.state
    }

    return null
  }
}

class MyCvePositiveTests {
  async findOneByCveId () {
    return null
  }

  async updateByCveId () {
    return null
  }
}

server.route('/cve-create-record-negative-tests/:id')
  .post((req, res, next) => {
    const factory = {
      getCveRepository: () => { return new MyCveNegativeTests() },
      getCveIdRepository: () => { return new MyCveIdNegativeTests() },
      getOrgRepository: () => { return new MyOrg() },
      getUserRepository: () => { return new MyUser() }
    }
    req.ctx.repositories = factory
    next()
  }, cveParams.parsePostParams, cveController.CVE_SUBMIT)

server.route('/cve-create-record-positive-tests/:id')
  .post((req, res, next) => {
    const factory = {
      getCveRepository: () => { return new MyCvePositiveTests() },
      getCveIdRepository: () => { return new MyCveIdPositiveTests() },
      getOrgRepository: () => { return new MyOrg() },
      getUserRepository: () => { return new MyUser() }
    }
    req.ctx.repositories = factory
    next()
  }, cveParams.parsePostParams, cveController.CVE_SUBMIT)

describe('Testing the POST /cve/:id endpoint in Cve Controller', () => {
  context('Negative Tests', () => {
    it('should return 400 bad request because the cve id in the parameter does not match the cve id in the JSON body', (done) => {
      chai.request(server)
        .post(`/cve-create-record-negative-tests/${nonExistentCveId}`)
        .set(cveFixtures.secretariatHeader)
        .send(cvePublicPass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveIdMismatch()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('should return 400 bad request because the cve record cannot be created in the RESERVED state', (done) => {
      chai.request(server)
        .post(`/cve-create-record-negative-tests/${cveIdReserved4}`)
        .set(cveFixtures.secretariatHeader)
        .send(cveReservedPass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveCreateUnsupportedState(CONSTANTS.CVE_STATES.RESERVED)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('should return 403 forbidden because the cve id does not exist', (done) => {
      const nonExistentCve = JSON.parse(JSON.stringify(cvePublicPass4))
      nonExistentCve.CVE_data_meta.ID = nonExistentCveId

      chai.request(server)
        .post(`/cve-create-record-negative-tests/${nonExistentCveId}`)
        .set(cveFixtures.secretariatHeader)
        .send(nonExistentCve)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveDne()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('should return 403 forbidden because the cve id has state AVAILABLE', (done) => {
      const testCve = JSON.parse(JSON.stringify(cvePublicPass4))
      testCve.CVE_data_meta.ID = cveIdAvailable4

      chai.request(server)
        .post(`/cve-create-record-negative-tests/${cveIdAvailable4}`)
        .set(cveFixtures.secretariatHeader)
        .send(testCve)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveDne()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('should return 400 bad request because the cve record already exist', (done) => {
      chai.request(server)
        .post(`/cve-create-record-negative-tests/${cveIdPublic4}`)
        .set(cveFixtures.secretariatHeader)
        .send(cvePublicPass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.cveRecordExists()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Positive Tests', () => {
    it('State PUBLIC: should return the cve record because the cve record was created', (done) => {
      const cveIdTestRepo = new MyCveIdPositiveTests()
      const doc = cveIdTestRepo.getCveIdPublic() // get internal state of cveId document
      expect(doc).to.have.property('cve_id').and.to.equal(cveIdPublic4)
      expect(doc).to.have.property('state').and.to.equal(CONSTANTS.CVE_STATES.RESERVED)

      chai.request(server)
        .post(`/cve-create-record-positive-tests/${cveIdPublic4}`)
        .set(cveFixtures.secretariatHeader)
        .send(cvePublicPass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.nested.property('CVE_data_meta.ID').and.to.equal(cveIdPublic4)
          expect(res.body.created).to.have.nested.property('CVE_data_meta.STATE').and.to.equal(CONSTANTS.CVE_STATES.PUBLIC)
          expect(doc).to.have.property('cve_id').and.to.equal(cveIdPublic4)
          expect(doc).to.have.property('state').and.to.equal(CONSTANTS.CVE_STATES.PUBLIC)
          done()
        })
    })

    it('STATE REJECT: should return the cve record because the cve record was created', (done) => {
      const cveIdTestRepo = new MyCveIdPositiveTests()
      const doc = cveIdTestRepo.getCveIdReject() // get internal state of cveId document
      expect(doc).to.have.property('cve_id').and.to.equal(cveIdReject4)
      expect(doc).to.have.property('state').and.to.equal(CONSTANTS.CVE_STATES.RESERVED)

      chai.request(server)
        .post(`/cve-create-record-positive-tests/${cveIdReject4}`)
        .set(cveFixtures.secretariatHeader)
        .send(cveRejectPass4)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.nested.property('CVE_data_meta.ID').and.to.equal(cveIdReject4)
          expect(res.body.created).to.have.nested.property('CVE_data_meta.STATE').and.to.equal(CONSTANTS.CVE_STATES.REJECT)
          expect(doc).to.have.property('cve_id').and.to.equal(cveIdReject4)
          expect(doc).to.have.property('state').and.to.equal(CONSTANTS.CVE_STATES.REJECT)
          done()
        })
    })
  })
})
