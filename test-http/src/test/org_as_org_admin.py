# Tests in this file use an Org admin user provided by a Pytest fixture. The
# tests here should be a subset of the secretariat tests, since the CNA of last
# resort should always be able to perform any root CNA functionality in
# addition to functionality reserved for the CNA of last resort.
import json
import requests
import uuid
from src import env
from src.test.org import (ORG_URL, create_new_user_with_new_org_by_uuid,
                                 post_new_org)
from src.utils import response_contains, response_contains_json


def test_org_admin_get_all_orgs(org_admin_headers):
    """ services api rejects requests for all orgs by non-secretariat users """
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}',
        headers=org_admin_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'SECRETARIAT_ONLY')


def test_org_admin_get_mitre_org(org_admin_headers):
    """ services api rejects requests for secretariat by non-secretariat users """
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/mitre',
        headers=org_admin_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_ORG_OR_SECRETARIAT')


def test_org_admin_get_another_org(org_admin_headers):
    """ services api rejects requests for any org by another org user """
    different_org = str(uuid.uuid4())
    res = post_new_org(different_org, different_org)
    assert res.status_code == 200
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{different_org}',
        headers=org_admin_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_ORG_OR_SECRETARIAT')


def test_org_admin_get_own_org(org_admin_headers):
    """ services api allows org admins to get their own org's document """
    org = org_admin_headers["CVE-API-ORG"]
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}',
        headers=org_admin_headers
    )
    assert res.status_code == 200
    response_contains(res, org_admin_headers['CVE-API-ORG'])


def test_org_admin_get_own_id_quota_info(org_admin_headers):
    """ services api allows org admins to get info about their org's quota """
    org = org_admin_headers["CVE-API-ORG"]
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/id_quota',
        headers=org_admin_headers
    )
    assert res.status_code == 200
    id_quota = json.loads(res.content.decode())['id_quota']
    assert id_quota >= 0
    assert id_quota <= 100000


def test_org_admin_get_mitre_user_info(org_admin_headers):
    """ services api prevents org users from viewing secretariat user info """
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/mitre/user/{env.AWG_USER_NAME}',
        headers=org_admin_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_ORG_OR_SECRETARIAT')


def test_org_admin_get_another_org_user_info(org_admin_headers):
    """ services api prevents org admin users from viewing another org users info """
    org, user = create_new_user_with_new_org_by_uuid()
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=org_admin_headers
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_SAME_ORG_OR_SECRETARIAT')


def test_org_admin_get_own_user_info(org_admin_headers):
    """ services api allows org admin to get its own user info """
    org = org_admin_headers['CVE-API-ORG']
    user = org_admin_headers['CVE-API-USER']
    res = requests.get(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}',
        headers=org_admin_headers
    )
    assert res.status_code == 200
    response_contains(res, user)


def test_org_admin_cannot_create_another_org(org_admin_headers):
    """ services api does not allow org admins to create other orgs """
    res = requests.post(
        f'{env.AWG_BASE_URL}{ORG_URL}',
        headers=org_admin_headers,
        params={'short_name': str(uuid.uuid4())}
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'SECRETARIAT_ONLY')


def test_org_admin_cannot_create_user_for_another_org(org_admin_headers):
    """ services api prevents org admins from creating users for other orgs """
    org = str(uuid.uuid4())
    res = post_new_org(org, org)
    assert res.status_code == 200
    res = requests.post(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user',
        headers=org_admin_headers,
        json={'username':'BLARG'}
    )
    assert res.status_code == 403
    response_contains_json(res, 'error', 'NOT_ORG_ADMIN_OR_SECRETARIAT')


def test_org_admin_reset_own_secret(org_admin_headers):
    """ services api allows admin users to reset their own secret """
    org = org_admin_headers['CVE-API-ORG']
    user = org_admin_headers['CVE-API-USER']
    res = requests.put(
        f'{env.AWG_BASE_URL}{ORG_URL}/{org}/user/{user}/reset_secret',
        headers=org_admin_headers
    )
    assert res.status_code == 200
    response_contains(res, 'API-secret')
